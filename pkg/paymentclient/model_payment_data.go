/*
Sample API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentclient

import (
	"encoding/json"
	"time"
)

// PaymentData struct for PaymentData
type PaymentData struct {
	Provider string `json:"provider"`
	Reference *string `json:"reference,omitempty"`
	Scheme *string `json:"scheme,omitempty"`
	Status string `json:"status"`
	Value PaymentDataValue `json:"value"`
	Date time.Time `json:"date"`
	Raw *map[string]interface{} `json:"raw,omitempty"`
}

// NewPaymentData instantiates a new PaymentData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentData(provider string, status string, value PaymentDataValue, date time.Time) *PaymentData {
	this := PaymentData{}
	this.Provider = provider
	this.Status = status
	this.Value = value
	this.Date = date
	return &this
}

// NewPaymentDataWithDefaults instantiates a new PaymentData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentDataWithDefaults() *PaymentData {
	this := PaymentData{}
	return &this
}

// GetProvider returns the Provider field value
func (o *PaymentData) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *PaymentData) GetProviderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *PaymentData) SetProvider(v string) {
	o.Provider = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *PaymentData) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentData) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *PaymentData) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *PaymentData) SetReference(v string) {
	o.Reference = &v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *PaymentData) GetScheme() string {
	if o == nil || o.Scheme == nil {
		var ret string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentData) GetSchemeOk() (*string, bool) {
	if o == nil || o.Scheme == nil {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *PaymentData) HasScheme() bool {
	if o != nil && o.Scheme != nil {
		return true
	}

	return false
}

// SetScheme gets a reference to the given string and assigns it to the Scheme field.
func (o *PaymentData) SetScheme(v string) {
	o.Scheme = &v
}

// GetStatus returns the Status field value
func (o *PaymentData) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PaymentData) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PaymentData) SetStatus(v string) {
	o.Status = v
}

// GetValue returns the Value field value
func (o *PaymentData) GetValue() PaymentDataValue {
	if o == nil {
		var ret PaymentDataValue
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *PaymentData) GetValueOk() (*PaymentDataValue, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *PaymentData) SetValue(v PaymentDataValue) {
	o.Value = v
}

// GetDate returns the Date field value
func (o *PaymentData) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *PaymentData) GetDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *PaymentData) SetDate(v time.Time) {
	o.Date = v
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *PaymentData) GetRaw() map[string]interface{} {
	if o == nil || o.Raw == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentData) GetRawOk() (*map[string]interface{}, bool) {
	if o == nil || o.Raw == nil {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *PaymentData) HasRaw() bool {
	if o != nil && o.Raw != nil {
		return true
	}

	return false
}

// SetRaw gets a reference to the given map[string]interface{} and assigns it to the Raw field.
func (o *PaymentData) SetRaw(v map[string]interface{}) {
	o.Raw = &v
}

func (o PaymentData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["provider"] = o.Provider
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if o.Scheme != nil {
		toSerialize["scheme"] = o.Scheme
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["date"] = o.Date
	}
	if o.Raw != nil {
		toSerialize["raw"] = o.Raw
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentData struct {
	value *PaymentData
	isSet bool
}

func (v NullablePaymentData) Get() *PaymentData {
	return v.value
}

func (v *NullablePaymentData) Set(val *PaymentData) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentData) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentData(val *PaymentData) *NullablePaymentData {
	return &NullablePaymentData{value: val, isSet: true}
}

func (v NullablePaymentData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


