// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type V3PaymentInitiationStatusEnum string

const (
	V3PaymentInitiationStatusEnumUnknown                V3PaymentInitiationStatusEnum = "UNKNOWN"
	V3PaymentInitiationStatusEnumWaitingForValidation   V3PaymentInitiationStatusEnum = "WAITING_FOR_VALIDATION"
	V3PaymentInitiationStatusEnumScheduledForProcessing V3PaymentInitiationStatusEnum = "SCHEDULED_FOR_PROCESSING"
	V3PaymentInitiationStatusEnumProcessing             V3PaymentInitiationStatusEnum = "PROCESSING"
	V3PaymentInitiationStatusEnumProcessed              V3PaymentInitiationStatusEnum = "PROCESSED"
	V3PaymentInitiationStatusEnumFailed                 V3PaymentInitiationStatusEnum = "FAILED"
	V3PaymentInitiationStatusEnumRejected               V3PaymentInitiationStatusEnum = "REJECTED"
	V3PaymentInitiationStatusEnumReverseProcessing      V3PaymentInitiationStatusEnum = "REVERSE_PROCESSING"
	V3PaymentInitiationStatusEnumReverseFailed          V3PaymentInitiationStatusEnum = "REVERSE_FAILED"
	V3PaymentInitiationStatusEnumReversed               V3PaymentInitiationStatusEnum = "REVERSED"
)

func (e V3PaymentInitiationStatusEnum) ToPointer() *V3PaymentInitiationStatusEnum {
	return &e
}
func (e *V3PaymentInitiationStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "WAITING_FOR_VALIDATION":
		fallthrough
	case "SCHEDULED_FOR_PROCESSING":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "PROCESSED":
		fallthrough
	case "FAILED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "REVERSE_PROCESSING":
		fallthrough
	case "REVERSE_FAILED":
		fallthrough
	case "REVERSED":
		*e = V3PaymentInitiationStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3PaymentInitiationStatusEnum: %v", v)
	}
}
