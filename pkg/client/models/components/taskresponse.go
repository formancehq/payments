// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/formancehq/payments/pkg/client/internal/utils"
)

type DataUnionType string

const (
	DataUnionTypeTaskStripe        DataUnionType = "TaskStripe"
	DataUnionTypeTaskWise          DataUnionType = "TaskWise"
	DataUnionTypeTaskCurrencyCloud DataUnionType = "TaskCurrencyCloud"
	DataUnionTypeTaskDummyPay      DataUnionType = "TaskDummyPay"
	DataUnionTypeTaskModulr        DataUnionType = "TaskModulr"
	DataUnionTypeTaskBankingCircle DataUnionType = "TaskBankingCircle"
	DataUnionTypeTaskMangoPay      DataUnionType = "TaskMangoPay"
	DataUnionTypeTaskMoneycorp     DataUnionType = "TaskMoneycorp"
)

type DataUnion struct {
	TaskStripe        *TaskStripe        `queryParam:"inline"`
	TaskWise          *TaskWise          `queryParam:"inline"`
	TaskCurrencyCloud *TaskCurrencyCloud `queryParam:"inline"`
	TaskDummyPay      *TaskDummyPay      `queryParam:"inline"`
	TaskModulr        *TaskModulr        `queryParam:"inline"`
	TaskBankingCircle *TaskBankingCircle `queryParam:"inline"`
	TaskMangoPay      *TaskMangoPay      `queryParam:"inline"`
	TaskMoneycorp     *TaskMoneycorp     `queryParam:"inline"`

	Type DataUnionType
}

func CreateDataUnionTaskStripe(taskStripe TaskStripe) DataUnion {
	typ := DataUnionTypeTaskStripe

	return DataUnion{
		TaskStripe: &taskStripe,
		Type:       typ,
	}
}

func CreateDataUnionTaskWise(taskWise TaskWise) DataUnion {
	typ := DataUnionTypeTaskWise

	return DataUnion{
		TaskWise: &taskWise,
		Type:     typ,
	}
}

func CreateDataUnionTaskCurrencyCloud(taskCurrencyCloud TaskCurrencyCloud) DataUnion {
	typ := DataUnionTypeTaskCurrencyCloud

	return DataUnion{
		TaskCurrencyCloud: &taskCurrencyCloud,
		Type:              typ,
	}
}

func CreateDataUnionTaskDummyPay(taskDummyPay TaskDummyPay) DataUnion {
	typ := DataUnionTypeTaskDummyPay

	return DataUnion{
		TaskDummyPay: &taskDummyPay,
		Type:         typ,
	}
}

func CreateDataUnionTaskModulr(taskModulr TaskModulr) DataUnion {
	typ := DataUnionTypeTaskModulr

	return DataUnion{
		TaskModulr: &taskModulr,
		Type:       typ,
	}
}

func CreateDataUnionTaskBankingCircle(taskBankingCircle TaskBankingCircle) DataUnion {
	typ := DataUnionTypeTaskBankingCircle

	return DataUnion{
		TaskBankingCircle: &taskBankingCircle,
		Type:              typ,
	}
}

func CreateDataUnionTaskMangoPay(taskMangoPay TaskMangoPay) DataUnion {
	typ := DataUnionTypeTaskMangoPay

	return DataUnion{
		TaskMangoPay: &taskMangoPay,
		Type:         typ,
	}
}

func CreateDataUnionTaskMoneycorp(taskMoneycorp TaskMoneycorp) DataUnion {
	typ := DataUnionTypeTaskMoneycorp

	return DataUnion{
		TaskMoneycorp: &taskMoneycorp,
		Type:          typ,
	}
}

func (u *DataUnion) UnmarshalJSON(data []byte) error {

	var taskStripe TaskStripe = TaskStripe{}
	if err := utils.UnmarshalJSON(data, &taskStripe, "", true, true); err == nil {
		u.TaskStripe = &taskStripe
		u.Type = DataUnionTypeTaskStripe
		return nil
	}

	var taskWise TaskWise = TaskWise{}
	if err := utils.UnmarshalJSON(data, &taskWise, "", true, true); err == nil {
		u.TaskWise = &taskWise
		u.Type = DataUnionTypeTaskWise
		return nil
	}

	var taskCurrencyCloud TaskCurrencyCloud = TaskCurrencyCloud{}
	if err := utils.UnmarshalJSON(data, &taskCurrencyCloud, "", true, true); err == nil {
		u.TaskCurrencyCloud = &taskCurrencyCloud
		u.Type = DataUnionTypeTaskCurrencyCloud
		return nil
	}

	var taskDummyPay TaskDummyPay = TaskDummyPay{}
	if err := utils.UnmarshalJSON(data, &taskDummyPay, "", true, true); err == nil {
		u.TaskDummyPay = &taskDummyPay
		u.Type = DataUnionTypeTaskDummyPay
		return nil
	}

	var taskModulr TaskModulr = TaskModulr{}
	if err := utils.UnmarshalJSON(data, &taskModulr, "", true, true); err == nil {
		u.TaskModulr = &taskModulr
		u.Type = DataUnionTypeTaskModulr
		return nil
	}

	var taskBankingCircle TaskBankingCircle = TaskBankingCircle{}
	if err := utils.UnmarshalJSON(data, &taskBankingCircle, "", true, true); err == nil {
		u.TaskBankingCircle = &taskBankingCircle
		u.Type = DataUnionTypeTaskBankingCircle
		return nil
	}

	var taskMangoPay TaskMangoPay = TaskMangoPay{}
	if err := utils.UnmarshalJSON(data, &taskMangoPay, "", true, true); err == nil {
		u.TaskMangoPay = &taskMangoPay
		u.Type = DataUnionTypeTaskMangoPay
		return nil
	}

	var taskMoneycorp TaskMoneycorp = TaskMoneycorp{}
	if err := utils.UnmarshalJSON(data, &taskMoneycorp, "", true, true); err == nil {
		u.TaskMoneycorp = &taskMoneycorp
		u.Type = DataUnionTypeTaskMoneycorp
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DataUnion", string(data))
}

func (u DataUnion) MarshalJSON() ([]byte, error) {
	if u.TaskStripe != nil {
		return utils.MarshalJSON(u.TaskStripe, "", true)
	}

	if u.TaskWise != nil {
		return utils.MarshalJSON(u.TaskWise, "", true)
	}

	if u.TaskCurrencyCloud != nil {
		return utils.MarshalJSON(u.TaskCurrencyCloud, "", true)
	}

	if u.TaskDummyPay != nil {
		return utils.MarshalJSON(u.TaskDummyPay, "", true)
	}

	if u.TaskModulr != nil {
		return utils.MarshalJSON(u.TaskModulr, "", true)
	}

	if u.TaskBankingCircle != nil {
		return utils.MarshalJSON(u.TaskBankingCircle, "", true)
	}

	if u.TaskMangoPay != nil {
		return utils.MarshalJSON(u.TaskMangoPay, "", true)
	}

	if u.TaskMoneycorp != nil {
		return utils.MarshalJSON(u.TaskMoneycorp, "", true)
	}

	return nil, errors.New("could not marshal union type DataUnion: all fields are null")
}

// TaskResponse - OK
type TaskResponse struct {
	Data DataUnion `json:"data"`
}

func (o *TaskResponse) GetData() DataUnion {
	if o == nil {
		return DataUnion{}
	}
	return o.Data
}
