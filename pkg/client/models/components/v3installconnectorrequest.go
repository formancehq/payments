// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/formancehq/payments/pkg/client/internal/utils"
)

type V3InstallConnectorRequestType string

const (
	V3InstallConnectorRequestTypeAdyen         V3InstallConnectorRequestType = "Adyen"
	V3InstallConnectorRequestTypeAtlar         V3InstallConnectorRequestType = "Atlar"
	V3InstallConnectorRequestTypeBankingcircle V3InstallConnectorRequestType = "Bankingcircle"
	V3InstallConnectorRequestTypeCurrencycloud V3InstallConnectorRequestType = "Currencycloud"
	V3InstallConnectorRequestTypeDummypay      V3InstallConnectorRequestType = "Dummypay"
	V3InstallConnectorRequestTypeGeneric       V3InstallConnectorRequestType = "Generic"
	V3InstallConnectorRequestTypeMangopay      V3InstallConnectorRequestType = "Mangopay"
	V3InstallConnectorRequestTypeModulr        V3InstallConnectorRequestType = "Modulr"
	V3InstallConnectorRequestTypeMoneycorp     V3InstallConnectorRequestType = "Moneycorp"
	V3InstallConnectorRequestTypeStripe        V3InstallConnectorRequestType = "Stripe"
	V3InstallConnectorRequestTypeWise          V3InstallConnectorRequestType = "Wise"
)

type V3InstallConnectorRequest struct {
	V3AdyenConfig         *V3AdyenConfig         `queryParam:"inline"`
	V3AtlarConfig         *V3AtlarConfig         `queryParam:"inline"`
	V3BankingcircleConfig *V3BankingcircleConfig `queryParam:"inline"`
	V3CurrencycloudConfig *V3CurrencycloudConfig `queryParam:"inline"`
	V3DummypayConfig      *V3DummypayConfig      `queryParam:"inline"`
	V3GenericConfig       *V3GenericConfig       `queryParam:"inline"`
	V3MangopayConfig      *V3MangopayConfig      `queryParam:"inline"`
	V3ModulrConfig        *V3ModulrConfig        `queryParam:"inline"`
	V3MoneycorpConfig     *V3MoneycorpConfig     `queryParam:"inline"`
	V3StripeConfig        *V3StripeConfig        `queryParam:"inline"`
	V3WiseConfig          *V3WiseConfig          `queryParam:"inline"`

	Type V3InstallConnectorRequestType
}

func CreateV3InstallConnectorRequestAdyen(adyen V3AdyenConfig) V3InstallConnectorRequest {
	typ := V3InstallConnectorRequestTypeAdyen

	typStr := string(typ)
	adyen.Provider = &typStr

	return V3InstallConnectorRequest{
		V3AdyenConfig: &adyen,
		Type:          typ,
	}
}

func CreateV3InstallConnectorRequestAtlar(atlar V3AtlarConfig) V3InstallConnectorRequest {
	typ := V3InstallConnectorRequestTypeAtlar

	typStr := string(typ)
	atlar.Provider = &typStr

	return V3InstallConnectorRequest{
		V3AtlarConfig: &atlar,
		Type:          typ,
	}
}

func CreateV3InstallConnectorRequestBankingcircle(bankingcircle V3BankingcircleConfig) V3InstallConnectorRequest {
	typ := V3InstallConnectorRequestTypeBankingcircle

	typStr := string(typ)
	bankingcircle.Provider = &typStr

	return V3InstallConnectorRequest{
		V3BankingcircleConfig: &bankingcircle,
		Type:                  typ,
	}
}

func CreateV3InstallConnectorRequestCurrencycloud(currencycloud V3CurrencycloudConfig) V3InstallConnectorRequest {
	typ := V3InstallConnectorRequestTypeCurrencycloud

	typStr := string(typ)
	currencycloud.Provider = &typStr

	return V3InstallConnectorRequest{
		V3CurrencycloudConfig: &currencycloud,
		Type:                  typ,
	}
}

func CreateV3InstallConnectorRequestDummypay(dummypay V3DummypayConfig) V3InstallConnectorRequest {
	typ := V3InstallConnectorRequestTypeDummypay

	typStr := string(typ)
	dummypay.Provider = &typStr

	return V3InstallConnectorRequest{
		V3DummypayConfig: &dummypay,
		Type:             typ,
	}
}

func CreateV3InstallConnectorRequestGeneric(generic V3GenericConfig) V3InstallConnectorRequest {
	typ := V3InstallConnectorRequestTypeGeneric

	typStr := string(typ)
	generic.Provider = &typStr

	return V3InstallConnectorRequest{
		V3GenericConfig: &generic,
		Type:            typ,
	}
}

func CreateV3InstallConnectorRequestMangopay(mangopay V3MangopayConfig) V3InstallConnectorRequest {
	typ := V3InstallConnectorRequestTypeMangopay

	typStr := string(typ)
	mangopay.Provider = &typStr

	return V3InstallConnectorRequest{
		V3MangopayConfig: &mangopay,
		Type:             typ,
	}
}

func CreateV3InstallConnectorRequestModulr(modulr V3ModulrConfig) V3InstallConnectorRequest {
	typ := V3InstallConnectorRequestTypeModulr

	typStr := string(typ)
	modulr.Provider = &typStr

	return V3InstallConnectorRequest{
		V3ModulrConfig: &modulr,
		Type:           typ,
	}
}

func CreateV3InstallConnectorRequestMoneycorp(moneycorp V3MoneycorpConfig) V3InstallConnectorRequest {
	typ := V3InstallConnectorRequestTypeMoneycorp

	typStr := string(typ)
	moneycorp.Provider = &typStr

	return V3InstallConnectorRequest{
		V3MoneycorpConfig: &moneycorp,
		Type:              typ,
	}
}

func CreateV3InstallConnectorRequestStripe(stripe V3StripeConfig) V3InstallConnectorRequest {
	typ := V3InstallConnectorRequestTypeStripe

	typStr := string(typ)
	stripe.Provider = &typStr

	return V3InstallConnectorRequest{
		V3StripeConfig: &stripe,
		Type:           typ,
	}
}

func CreateV3InstallConnectorRequestWise(wise V3WiseConfig) V3InstallConnectorRequest {
	typ := V3InstallConnectorRequestTypeWise

	typStr := string(typ)
	wise.Provider = &typStr

	return V3InstallConnectorRequest{
		V3WiseConfig: &wise,
		Type:         typ,
	}
}

func (u *V3InstallConnectorRequest) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Provider string `json:"provider"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Provider {
	case "Adyen":
		v3AdyenConfig := new(V3AdyenConfig)
		if err := utils.UnmarshalJSON(data, &v3AdyenConfig, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Provider == Adyen) type V3AdyenConfig within V3InstallConnectorRequest: %w", string(data), err)
		}

		u.V3AdyenConfig = v3AdyenConfig
		u.Type = V3InstallConnectorRequestTypeAdyen
		return nil
	case "Atlar":
		v3AtlarConfig := new(V3AtlarConfig)
		if err := utils.UnmarshalJSON(data, &v3AtlarConfig, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Provider == Atlar) type V3AtlarConfig within V3InstallConnectorRequest: %w", string(data), err)
		}

		u.V3AtlarConfig = v3AtlarConfig
		u.Type = V3InstallConnectorRequestTypeAtlar
		return nil
	case "Bankingcircle":
		v3BankingcircleConfig := new(V3BankingcircleConfig)
		if err := utils.UnmarshalJSON(data, &v3BankingcircleConfig, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Provider == Bankingcircle) type V3BankingcircleConfig within V3InstallConnectorRequest: %w", string(data), err)
		}

		u.V3BankingcircleConfig = v3BankingcircleConfig
		u.Type = V3InstallConnectorRequestTypeBankingcircle
		return nil
	case "Currencycloud":
		v3CurrencycloudConfig := new(V3CurrencycloudConfig)
		if err := utils.UnmarshalJSON(data, &v3CurrencycloudConfig, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Provider == Currencycloud) type V3CurrencycloudConfig within V3InstallConnectorRequest: %w", string(data), err)
		}

		u.V3CurrencycloudConfig = v3CurrencycloudConfig
		u.Type = V3InstallConnectorRequestTypeCurrencycloud
		return nil
	case "Dummypay":
		v3DummypayConfig := new(V3DummypayConfig)
		if err := utils.UnmarshalJSON(data, &v3DummypayConfig, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Provider == Dummypay) type V3DummypayConfig within V3InstallConnectorRequest: %w", string(data), err)
		}

		u.V3DummypayConfig = v3DummypayConfig
		u.Type = V3InstallConnectorRequestTypeDummypay
		return nil
	case "Generic":
		v3GenericConfig := new(V3GenericConfig)
		if err := utils.UnmarshalJSON(data, &v3GenericConfig, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Provider == Generic) type V3GenericConfig within V3InstallConnectorRequest: %w", string(data), err)
		}

		u.V3GenericConfig = v3GenericConfig
		u.Type = V3InstallConnectorRequestTypeGeneric
		return nil
	case "Mangopay":
		v3MangopayConfig := new(V3MangopayConfig)
		if err := utils.UnmarshalJSON(data, &v3MangopayConfig, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Provider == Mangopay) type V3MangopayConfig within V3InstallConnectorRequest: %w", string(data), err)
		}

		u.V3MangopayConfig = v3MangopayConfig
		u.Type = V3InstallConnectorRequestTypeMangopay
		return nil
	case "Modulr":
		v3ModulrConfig := new(V3ModulrConfig)
		if err := utils.UnmarshalJSON(data, &v3ModulrConfig, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Provider == Modulr) type V3ModulrConfig within V3InstallConnectorRequest: %w", string(data), err)
		}

		u.V3ModulrConfig = v3ModulrConfig
		u.Type = V3InstallConnectorRequestTypeModulr
		return nil
	case "Moneycorp":
		v3MoneycorpConfig := new(V3MoneycorpConfig)
		if err := utils.UnmarshalJSON(data, &v3MoneycorpConfig, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Provider == Moneycorp) type V3MoneycorpConfig within V3InstallConnectorRequest: %w", string(data), err)
		}

		u.V3MoneycorpConfig = v3MoneycorpConfig
		u.Type = V3InstallConnectorRequestTypeMoneycorp
		return nil
	case "Stripe":
		v3StripeConfig := new(V3StripeConfig)
		if err := utils.UnmarshalJSON(data, &v3StripeConfig, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Provider == Stripe) type V3StripeConfig within V3InstallConnectorRequest: %w", string(data), err)
		}

		u.V3StripeConfig = v3StripeConfig
		u.Type = V3InstallConnectorRequestTypeStripe
		return nil
	case "Wise":
		v3WiseConfig := new(V3WiseConfig)
		if err := utils.UnmarshalJSON(data, &v3WiseConfig, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Provider == Wise) type V3WiseConfig within V3InstallConnectorRequest: %w", string(data), err)
		}

		u.V3WiseConfig = v3WiseConfig
		u.Type = V3InstallConnectorRequestTypeWise
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for V3InstallConnectorRequest", string(data))
}

func (u V3InstallConnectorRequest) MarshalJSON() ([]byte, error) {
	if u.V3AdyenConfig != nil {
		return utils.MarshalJSON(u.V3AdyenConfig, "", true)
	}

	if u.V3AtlarConfig != nil {
		return utils.MarshalJSON(u.V3AtlarConfig, "", true)
	}

	if u.V3BankingcircleConfig != nil {
		return utils.MarshalJSON(u.V3BankingcircleConfig, "", true)
	}

	if u.V3CurrencycloudConfig != nil {
		return utils.MarshalJSON(u.V3CurrencycloudConfig, "", true)
	}

	if u.V3DummypayConfig != nil {
		return utils.MarshalJSON(u.V3DummypayConfig, "", true)
	}

	if u.V3GenericConfig != nil {
		return utils.MarshalJSON(u.V3GenericConfig, "", true)
	}

	if u.V3MangopayConfig != nil {
		return utils.MarshalJSON(u.V3MangopayConfig, "", true)
	}

	if u.V3ModulrConfig != nil {
		return utils.MarshalJSON(u.V3ModulrConfig, "", true)
	}

	if u.V3MoneycorpConfig != nil {
		return utils.MarshalJSON(u.V3MoneycorpConfig, "", true)
	}

	if u.V3StripeConfig != nil {
		return utils.MarshalJSON(u.V3StripeConfig, "", true)
	}

	if u.V3WiseConfig != nil {
		return utils.MarshalJSON(u.V3WiseConfig, "", true)
	}

	return nil, errors.New("could not marshal union type V3InstallConnectorRequest: all fields are null")
}
