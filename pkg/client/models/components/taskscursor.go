// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/formancehq/payments/pkg/client/internal/utils"
)

type DatumUnionType string

const (
	DatumUnionTypeTaskStripe        DatumUnionType = "TaskStripe"
	DatumUnionTypeTaskWise          DatumUnionType = "TaskWise"
	DatumUnionTypeTaskCurrencyCloud DatumUnionType = "TaskCurrencyCloud"
	DatumUnionTypeTaskDummyPay      DatumUnionType = "TaskDummyPay"
	DatumUnionTypeTaskModulr        DatumUnionType = "TaskModulr"
	DatumUnionTypeTaskBankingCircle DatumUnionType = "TaskBankingCircle"
	DatumUnionTypeTaskMangoPay      DatumUnionType = "TaskMangoPay"
	DatumUnionTypeTaskMoneycorp     DatumUnionType = "TaskMoneycorp"
)

type DatumUnion struct {
	TaskStripe        *TaskStripe        `queryParam:"inline"`
	TaskWise          *TaskWise          `queryParam:"inline"`
	TaskCurrencyCloud *TaskCurrencyCloud `queryParam:"inline"`
	TaskDummyPay      *TaskDummyPay      `queryParam:"inline"`
	TaskModulr        *TaskModulr        `queryParam:"inline"`
	TaskBankingCircle *TaskBankingCircle `queryParam:"inline"`
	TaskMangoPay      *TaskMangoPay      `queryParam:"inline"`
	TaskMoneycorp     *TaskMoneycorp     `queryParam:"inline"`

	Type DatumUnionType
}

func CreateDatumUnionTaskStripe(taskStripe TaskStripe) DatumUnion {
	typ := DatumUnionTypeTaskStripe

	return DatumUnion{
		TaskStripe: &taskStripe,
		Type:       typ,
	}
}

func CreateDatumUnionTaskWise(taskWise TaskWise) DatumUnion {
	typ := DatumUnionTypeTaskWise

	return DatumUnion{
		TaskWise: &taskWise,
		Type:     typ,
	}
}

func CreateDatumUnionTaskCurrencyCloud(taskCurrencyCloud TaskCurrencyCloud) DatumUnion {
	typ := DatumUnionTypeTaskCurrencyCloud

	return DatumUnion{
		TaskCurrencyCloud: &taskCurrencyCloud,
		Type:              typ,
	}
}

func CreateDatumUnionTaskDummyPay(taskDummyPay TaskDummyPay) DatumUnion {
	typ := DatumUnionTypeTaskDummyPay

	return DatumUnion{
		TaskDummyPay: &taskDummyPay,
		Type:         typ,
	}
}

func CreateDatumUnionTaskModulr(taskModulr TaskModulr) DatumUnion {
	typ := DatumUnionTypeTaskModulr

	return DatumUnion{
		TaskModulr: &taskModulr,
		Type:       typ,
	}
}

func CreateDatumUnionTaskBankingCircle(taskBankingCircle TaskBankingCircle) DatumUnion {
	typ := DatumUnionTypeTaskBankingCircle

	return DatumUnion{
		TaskBankingCircle: &taskBankingCircle,
		Type:              typ,
	}
}

func CreateDatumUnionTaskMangoPay(taskMangoPay TaskMangoPay) DatumUnion {
	typ := DatumUnionTypeTaskMangoPay

	return DatumUnion{
		TaskMangoPay: &taskMangoPay,
		Type:         typ,
	}
}

func CreateDatumUnionTaskMoneycorp(taskMoneycorp TaskMoneycorp) DatumUnion {
	typ := DatumUnionTypeTaskMoneycorp

	return DatumUnion{
		TaskMoneycorp: &taskMoneycorp,
		Type:          typ,
	}
}

func (u *DatumUnion) UnmarshalJSON(data []byte) error {

	var taskStripe TaskStripe = TaskStripe{}
	if err := utils.UnmarshalJSON(data, &taskStripe, "", true, true); err == nil {
		u.TaskStripe = &taskStripe
		u.Type = DatumUnionTypeTaskStripe
		return nil
	}

	var taskWise TaskWise = TaskWise{}
	if err := utils.UnmarshalJSON(data, &taskWise, "", true, true); err == nil {
		u.TaskWise = &taskWise
		u.Type = DatumUnionTypeTaskWise
		return nil
	}

	var taskCurrencyCloud TaskCurrencyCloud = TaskCurrencyCloud{}
	if err := utils.UnmarshalJSON(data, &taskCurrencyCloud, "", true, true); err == nil {
		u.TaskCurrencyCloud = &taskCurrencyCloud
		u.Type = DatumUnionTypeTaskCurrencyCloud
		return nil
	}

	var taskDummyPay TaskDummyPay = TaskDummyPay{}
	if err := utils.UnmarshalJSON(data, &taskDummyPay, "", true, true); err == nil {
		u.TaskDummyPay = &taskDummyPay
		u.Type = DatumUnionTypeTaskDummyPay
		return nil
	}

	var taskModulr TaskModulr = TaskModulr{}
	if err := utils.UnmarshalJSON(data, &taskModulr, "", true, true); err == nil {
		u.TaskModulr = &taskModulr
		u.Type = DatumUnionTypeTaskModulr
		return nil
	}

	var taskBankingCircle TaskBankingCircle = TaskBankingCircle{}
	if err := utils.UnmarshalJSON(data, &taskBankingCircle, "", true, true); err == nil {
		u.TaskBankingCircle = &taskBankingCircle
		u.Type = DatumUnionTypeTaskBankingCircle
		return nil
	}

	var taskMangoPay TaskMangoPay = TaskMangoPay{}
	if err := utils.UnmarshalJSON(data, &taskMangoPay, "", true, true); err == nil {
		u.TaskMangoPay = &taskMangoPay
		u.Type = DatumUnionTypeTaskMangoPay
		return nil
	}

	var taskMoneycorp TaskMoneycorp = TaskMoneycorp{}
	if err := utils.UnmarshalJSON(data, &taskMoneycorp, "", true, true); err == nil {
		u.TaskMoneycorp = &taskMoneycorp
		u.Type = DatumUnionTypeTaskMoneycorp
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DatumUnion", string(data))
}

func (u DatumUnion) MarshalJSON() ([]byte, error) {
	if u.TaskStripe != nil {
		return utils.MarshalJSON(u.TaskStripe, "", true)
	}

	if u.TaskWise != nil {
		return utils.MarshalJSON(u.TaskWise, "", true)
	}

	if u.TaskCurrencyCloud != nil {
		return utils.MarshalJSON(u.TaskCurrencyCloud, "", true)
	}

	if u.TaskDummyPay != nil {
		return utils.MarshalJSON(u.TaskDummyPay, "", true)
	}

	if u.TaskModulr != nil {
		return utils.MarshalJSON(u.TaskModulr, "", true)
	}

	if u.TaskBankingCircle != nil {
		return utils.MarshalJSON(u.TaskBankingCircle, "", true)
	}

	if u.TaskMangoPay != nil {
		return utils.MarshalJSON(u.TaskMangoPay, "", true)
	}

	if u.TaskMoneycorp != nil {
		return utils.MarshalJSON(u.TaskMoneycorp, "", true)
	}

	return nil, errors.New("could not marshal union type DatumUnion: all fields are null")
}

type TasksCursorCursor struct {
	PageSize int64        `json:"pageSize"`
	HasMore  bool         `json:"hasMore"`
	Previous *string      `json:"previous,omitempty"`
	Next     *string      `json:"next,omitempty"`
	Data     []DatumUnion `json:"data"`
}

func (o *TasksCursorCursor) GetPageSize() int64 {
	if o == nil {
		return 0
	}
	return o.PageSize
}

func (o *TasksCursorCursor) GetHasMore() bool {
	if o == nil {
		return false
	}
	return o.HasMore
}

func (o *TasksCursorCursor) GetPrevious() *string {
	if o == nil {
		return nil
	}
	return o.Previous
}

func (o *TasksCursorCursor) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *TasksCursorCursor) GetData() []DatumUnion {
	if o == nil {
		return []DatumUnion{}
	}
	return o.Data
}

// TasksCursor - OK
type TasksCursor struct {
	Cursor TasksCursorCursor `json:"cursor"`
}

func (o *TasksCursor) GetCursor() TasksCursorCursor {
	if o == nil {
		return TasksCursorCursor{}
	}
	return o.Cursor
}
