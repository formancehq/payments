// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type V3ErrorsEnum string

const (
	V3ErrorsEnumInternal             V3ErrorsEnum = "INTERNAL"
	V3ErrorsEnumValidation           V3ErrorsEnum = "VALIDATION"
	V3ErrorsEnumInvalidID            V3ErrorsEnum = "INVALID_ID"
	V3ErrorsEnumMissingOrInvalidBody V3ErrorsEnum = "MISSING_OR_INVALID_BODY"
	V3ErrorsEnumConflict             V3ErrorsEnum = "CONFLICT"
	V3ErrorsEnumNotFound             V3ErrorsEnum = "NOT_FOUND"
)

func (e V3ErrorsEnum) ToPointer() *V3ErrorsEnum {
	return &e
}
func (e *V3ErrorsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INTERNAL":
		fallthrough
	case "VALIDATION":
		fallthrough
	case "INVALID_ID":
		fallthrough
	case "MISSING_OR_INVALID_BODY":
		fallthrough
	case "CONFLICT":
		fallthrough
	case "NOT_FOUND":
		*e = V3ErrorsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V3ErrorsEnum: %v", v)
	}
}
