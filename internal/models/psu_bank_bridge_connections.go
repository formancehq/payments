package models

import (
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const (
	NoRedirectQueryParamID = "noRedirect"

	ObjectConnectionIDMetadataKey = "object_connection_id"
	ObjectPSUIDMetadataKey        = "object_psu_id"
)

type PSUBankBridgeConnectionAttemptStatus string

const (
	PSUBankBridgeConnectionAttemptStatusPending   PSUBankBridgeConnectionAttemptStatus = "pending"
	PSUBankBridgeConnectionAttemptStatusCompleted PSUBankBridgeConnectionAttemptStatus = "completed"
	PSUBankBridgeConnectionAttemptStatusExited    PSUBankBridgeConnectionAttemptStatus = "exited"
)

// When a user tries to connect to a banking bridge, we will create an attempt
// in order to save some crucial information.
type PSUBankBridgeConnectionAttempt struct {
	// ID of the attempt
	ID uuid.UUID `json:"id"`
	// ID of the psu
	PsuID uuid.UUID `json:"psuID"`
	// Related connector ID
	ConnectorID ConnectorID `json:"connectorID"`
	// Creation date of the attempt
	CreatedAt time.Time `json:"createdAt"`
	// Status of the attempt
	Status PSUBankBridgeConnectionAttemptStatus `json:"status"`
	// State given to the url in order to be able to verify that the callback
	// is valid.
	State CallbackState `json:"state"`
	// Client redirect URL, given by the user
	ClientRedirectURL *string `json:"clientRedirectURL"`

	// Optional
	// Temporary token generated by the banking bridge in order to create an
	// url.
	TemporaryToken *Token `json:"temporaryToken"`
	// Error message in case of failure
	Error *string `json:"error"`
}

func (a PSUBankBridgeConnectionAttempt) MarshalJSON() ([]byte, error) {
	return json.Marshal(&struct {
		ID                uuid.UUID     `json:"id"`
		PsuID             uuid.UUID     `json:"psuID"`
		ConnectorID       string        `json:"connectorID"`
		CreatedAt         time.Time     `json:"createdAt"`
		Status            string        `json:"status"`
		State             CallbackState `json:"state"`
		ClientRedirectURL *string       `json:"clientRedirectURL,omitempty"`
		TemporaryToken    *Token        `json:"temporaryToken,omitempty"`
		Error             *string       `json:"error,omitempty"`
	}{
		ID:                a.ID,
		PsuID:             a.PsuID,
		ConnectorID:       a.ConnectorID.String(),
		CreatedAt:         a.CreatedAt,
		Status:            string(a.Status),
		State:             a.State,
		ClientRedirectURL: a.ClientRedirectURL,
		TemporaryToken:    a.TemporaryToken,
		Error:             a.Error,
	})
}

func (a *PSUBankBridgeConnectionAttempt) UnmarshalJSON(data []byte) error {
	var aux struct {
		ID                uuid.UUID     `json:"id"`
		PsuID             uuid.UUID     `json:"psuID"`
		ConnectorID       string        `json:"connectorID"`
		CreatedAt         time.Time     `json:"createdAt"`
		Status            string        `json:"status"`
		State             CallbackState `json:"state"`
		ClientRedirectURL *string       `json:"clientRedirectURL,omitempty"`
		TemporaryToken    *Token        `json:"temporaryToken,omitempty"`
		Error             *string       `json:"error,omitempty"`
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	connectorID, err := ConnectorIDFromString(aux.ConnectorID)
	if err != nil {
		return err
	}

	a.ID = aux.ID
	a.PsuID = aux.PsuID
	a.ConnectorID = connectorID
	a.CreatedAt = aux.CreatedAt
	a.Status = PSUBankBridgeConnectionAttemptStatus(aux.Status)
	a.State = aux.State
	a.ClientRedirectURL = aux.ClientRedirectURL
	a.TemporaryToken = aux.TemporaryToken
	a.Error = aux.Error

	return nil
}

// Represents all connections of a psu for a given banking bridge (connector).
type PSUBankBridge struct {
	// ID of the psu
	PsuID uuid.UUID `json:"psuID"`
	// ID of the connector
	ConnectorID ConnectorID `json:"connectorID"`

	// Optional
	// AccessToken is optional for some banking bridges, like Powens, where we
	// have a notion of connection, but we only have one token for all of them.
	AccessToken *Token `json:"authToken"`
	// ID of the user on the banking bridge
	PSPUserID *string `json:"pspUserID,omitempty"`
	// per banking bridge additional information
	Metadata map[string]string `json:"metadata"`
}

type ConnectionStatus string

const (
	ConnectionStatusActive ConnectionStatus = "ACTIVE"
	ConnectionStatusError  ConnectionStatus = "ERROR"
)

type PSPPsuBankBridgeConnection struct {
	// ID of the connection, given by the banking bridge
	ConnectionID string `json:"connectionID"`
	// Creation date of the connection
	CreatedAt time.Time `json:"createdAt"`

	// Optional
	// AccessToken is optional for some banking bridges, like Powens, where we
	// have a notion of connection, but we only have one token for all of them.
	AccessToken *Token `json:"accessToken"`
	// Additional information about the connection depending on the connector
	Metadata map[string]string `json:"metadata"`
}

type PSUBankBridgeConnection struct {
	// ID of the connection, given by the banking bridge
	ConnectionID string `json:"connectionID"`
	// Connector ID
	ConnectorID ConnectorID `json:"connectorID"`
	// Creation date of the connection
	CreatedAt time.Time `json:"createdAt"`
	// Date of the last update of the connection's data
	DataUpdatedAt time.Time `json:"dataUpdatedAt"`
	// Status of the connection
	Status ConnectionStatus `json:"status"`
	// BankBridge Updated At
	UpdatedAt time.Time `json:"updatedAt"`

	// Optional
	// AccessToken is optional for some banking bridges, like Powens, where we
	// have a notion of connection, but we only have one token for all of them.
	AccessToken *Token `json:"accessToken"`
	// Error message in case of failure
	Error *string `json:"error"`
	// Additional information about the connection depending on the connector
	Metadata map[string]string `json:"metadata"`
}

func (psu PSUBankBridgeConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(&struct {
		ConnectionID string            `json:"connectionID"`
		ConnectorID  string            `json:"connectorID"`
		CreatedAt    time.Time         `json:"createdAt"`
		UpdatedAt    time.Time         `json:"updatedAt"`
		Status       string            `json:"status"`
		AccessToken  *Token            `json:"accessToken"`
		Metadata     map[string]string `json:"metadata"`
		Error        *string           `json:"error,omitempty"`
	}{
		ConnectionID: psu.ConnectionID,
		ConnectorID:  psu.ConnectorID.String(),
		CreatedAt:    psu.CreatedAt,
		UpdatedAt:    psu.UpdatedAt,
		Status:       string(psu.Status),
		AccessToken:  psu.AccessToken,
		Metadata:     psu.Metadata,
		Error:        psu.Error,
	})
}

func (psu *PSUBankBridgeConnection) UnmarshalJSON(data []byte) error {
	var aux struct {
		ConnectionID string            `json:"connectionID"`
		ConnectorID  string            `json:"connectorID"`
		CreatedAt    time.Time         `json:"createdAt"`
		UpdatedAt    time.Time         `json:"updatedAt"`
		Status       string            `json:"status"`
		AccessToken  *Token            `json:"accessToken"`
		Metadata     map[string]string `json:"metadata"`
		Error        *string           `json:"error,omitempty"`
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	connectorID, err := ConnectorIDFromString(aux.ConnectorID)
	if err != nil {
		return err
	}

	psu.ConnectionID = aux.ConnectionID
	psu.ConnectorID = connectorID
	psu.CreatedAt = aux.CreatedAt
	psu.UpdatedAt = aux.UpdatedAt
	psu.Status = ConnectionStatus(aux.Status)
	psu.AccessToken = aux.AccessToken
	psu.Metadata = aux.Metadata
	psu.Error = aux.Error

	return nil
}

func ToPSPPsuBankBridgeConnection(from PSUBankBridgeConnection) PSPPsuBankBridgeConnection {
	return PSPPsuBankBridgeConnection{
		ConnectionID: from.ConnectionID,
		CreatedAt:    from.CreatedAt,
		AccessToken:  from.AccessToken,
		Metadata:     from.Metadata,
	}
}

func FromPSPPsuBankBridgeConnection(from PSPPsuBankBridgeConnection, connectorID ConnectorID) PSUBankBridgeConnection {
	return PSUBankBridgeConnection{
		ConnectionID:  from.ConnectionID,
		ConnectorID:   connectorID,
		CreatedAt:     from.CreatedAt,
		UpdatedAt:     from.CreatedAt,
		DataUpdatedAt: time.Time{},
		AccessToken:   from.AccessToken,
		Metadata:      from.Metadata,
	}
}
