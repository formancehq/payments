// Code generated by MockGen. DO NOT EDIT.
// Source: engine.go
//
// Generated by this command:
//
//	mockgen -source engine.go -destination engine_generated.go -package engine . Engine
//

// Package engine is a generated GoMock package.
package engine

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	models "github.com/formancehq/payments/internal/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// AddAccountToPool mocks base method.
func (m *MockEngine) AddAccountToPool(ctx context.Context, id uuid.UUID, accountID models.AccountID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountToPool", ctx, id, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccountToPool indicates an expected call of AddAccountToPool.
func (mr *MockEngineMockRecorder) AddAccountToPool(ctx, id, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountToPool", reflect.TypeOf((*MockEngine)(nil).AddAccountToPool), ctx, id, accountID)
}

// CompleteUserLink mocks base method.
func (m *MockEngine) CompleteUserLink(ctx context.Context, connectorID models.ConnectorID, attemptID uuid.UUID, httpCallInformation models.HTTPCallInformation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteUserLink", ctx, connectorID, attemptID, httpCallInformation)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteUserLink indicates an expected call of CompleteUserLink.
func (mr *MockEngineMockRecorder) CompleteUserLink(ctx, connectorID, attemptID, httpCallInformation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteUserLink", reflect.TypeOf((*MockEngine)(nil).CompleteUserLink), ctx, connectorID, attemptID, httpCallInformation)
}

// CreateFormanceAccount mocks base method.
func (m *MockEngine) CreateFormanceAccount(ctx context.Context, account models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFormanceAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFormanceAccount indicates an expected call of CreateFormanceAccount.
func (mr *MockEngineMockRecorder) CreateFormanceAccount(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFormanceAccount", reflect.TypeOf((*MockEngine)(nil).CreateFormanceAccount), ctx, account)
}

// CreateFormancePayment mocks base method.
func (m *MockEngine) CreateFormancePayment(ctx context.Context, payment models.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFormancePayment", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFormancePayment indicates an expected call of CreateFormancePayment.
func (mr *MockEngineMockRecorder) CreateFormancePayment(ctx, payment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFormancePayment", reflect.TypeOf((*MockEngine)(nil).CreateFormancePayment), ctx, payment)
}

// CreateFormancePaymentInitiation mocks base method.
func (m *MockEngine) CreateFormancePaymentInitiation(ctx context.Context, paymentInitiation models.PaymentInitiation, adj models.PaymentInitiationAdjustment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFormancePaymentInitiation", ctx, paymentInitiation, adj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFormancePaymentInitiation indicates an expected call of CreateFormancePaymentInitiation.
func (mr *MockEngineMockRecorder) CreateFormancePaymentInitiation(ctx, paymentInitiation, adj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFormancePaymentInitiation", reflect.TypeOf((*MockEngine)(nil).CreateFormancePaymentInitiation), ctx, paymentInitiation, adj)
}

// CreatePayout mocks base method.
func (m *MockEngine) CreatePayout(ctx context.Context, piID models.PaymentInitiationID, attempt int, waitResult bool) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayout", ctx, piID, attempt, waitResult)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayout indicates an expected call of CreatePayout.
func (mr *MockEngineMockRecorder) CreatePayout(ctx, piID, attempt, waitResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayout", reflect.TypeOf((*MockEngine)(nil).CreatePayout), ctx, piID, attempt, waitResult)
}

// CreatePool mocks base method.
func (m *MockEngine) CreatePool(ctx context.Context, pool models.Pool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePool", ctx, pool)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePool indicates an expected call of CreatePool.
func (mr *MockEngineMockRecorder) CreatePool(ctx, pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePool", reflect.TypeOf((*MockEngine)(nil).CreatePool), ctx, pool)
}

// CreateTransfer mocks base method.
func (m *MockEngine) CreateTransfer(ctx context.Context, piID models.PaymentInitiationID, attempt int, waitResult bool) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", ctx, piID, attempt, waitResult)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockEngineMockRecorder) CreateTransfer(ctx, piID, attempt, waitResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockEngine)(nil).CreateTransfer), ctx, piID, attempt, waitResult)
}

// CreateUserLink mocks base method.
func (m *MockEngine) CreateUserLink(ctx context.Context, psuID uuid.UUID, connectorID models.ConnectorID, idempotencyKey *uuid.UUID, ClientRedirectURL *string) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserLink", ctx, psuID, connectorID, idempotencyKey, ClientRedirectURL)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserLink indicates an expected call of CreateUserLink.
func (mr *MockEngineMockRecorder) CreateUserLink(ctx, psuID, connectorID, idempotencyKey, ClientRedirectURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserLink", reflect.TypeOf((*MockEngine)(nil).CreateUserLink), ctx, psuID, connectorID, idempotencyKey, ClientRedirectURL)
}

// DeletePool mocks base method.
func (m *MockEngine) DeletePool(ctx context.Context, poolID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePool", ctx, poolID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePool indicates an expected call of DeletePool.
func (mr *MockEngineMockRecorder) DeletePool(ctx, poolID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePool", reflect.TypeOf((*MockEngine)(nil).DeletePool), ctx, poolID)
}

// DeleteUser mocks base method.
func (m *MockEngine) DeleteUser(ctx context.Context, psuID uuid.UUID) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, psuID)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockEngineMockRecorder) DeleteUser(ctx, psuID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockEngine)(nil).DeleteUser), ctx, psuID)
}

// DeleteUserConnection mocks base method.
func (m *MockEngine) DeleteUserConnection(ctx context.Context, connectorID models.ConnectorID, psuID uuid.UUID, connectionID string) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserConnection", ctx, connectorID, psuID, connectionID)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserConnection indicates an expected call of DeleteUserConnection.
func (mr *MockEngineMockRecorder) DeleteUserConnection(ctx, connectorID, psuID, connectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserConnection", reflect.TypeOf((*MockEngine)(nil).DeleteUserConnection), ctx, connectorID, psuID, connectionID)
}

// ForwardBankAccount mocks base method.
func (m *MockEngine) ForwardBankAccount(ctx context.Context, ba models.BankAccount, connectorID models.ConnectorID, waitResult bool) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardBankAccount", ctx, ba, connectorID, waitResult)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForwardBankAccount indicates an expected call of ForwardBankAccount.
func (mr *MockEngineMockRecorder) ForwardBankAccount(ctx, ba, connectorID, waitResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardBankAccount", reflect.TypeOf((*MockEngine)(nil).ForwardBankAccount), ctx, ba, connectorID, waitResult)
}

// ForwardUser mocks base method.
func (m *MockEngine) ForwardUser(ctx context.Context, psuID uuid.UUID, connectorID models.ConnectorID) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardUser", ctx, psuID, connectorID)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForwardUser indicates an expected call of ForwardUser.
func (mr *MockEngineMockRecorder) ForwardUser(ctx, psuID, connectorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardUser", reflect.TypeOf((*MockEngine)(nil).ForwardUser), ctx, psuID, connectorID)
}

// HandleWebhook mocks base method.
func (m *MockEngine) HandleWebhook(ctx context.Context, url, urlPath string, webhook models.Webhook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleWebhook", ctx, url, urlPath, webhook)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleWebhook indicates an expected call of HandleWebhook.
func (mr *MockEngineMockRecorder) HandleWebhook(ctx, url, urlPath, webhook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleWebhook", reflect.TypeOf((*MockEngine)(nil).HandleWebhook), ctx, url, urlPath, webhook)
}

// InstallConnector mocks base method.
func (m *MockEngine) InstallConnector(ctx context.Context, provider string, rawConfig json.RawMessage) (models.ConnectorID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallConnector", ctx, provider, rawConfig)
	ret0, _ := ret[0].(models.ConnectorID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallConnector indicates an expected call of InstallConnector.
func (mr *MockEngineMockRecorder) InstallConnector(ctx, provider, rawConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallConnector", reflect.TypeOf((*MockEngine)(nil).InstallConnector), ctx, provider, rawConfig)
}

// OnStart mocks base method.
func (m *MockEngine) OnStart(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnStart", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnStart indicates an expected call of OnStart.
func (mr *MockEngineMockRecorder) OnStart(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStart", reflect.TypeOf((*MockEngine)(nil).OnStart), ctx)
}

// OnStop mocks base method.
func (m *MockEngine) OnStop(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnStop", ctx)
}

// OnStop indicates an expected call of OnStop.
func (mr *MockEngineMockRecorder) OnStop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStop", reflect.TypeOf((*MockEngine)(nil).OnStop), ctx)
}

// RemoveAccountFromPool mocks base method.
func (m *MockEngine) RemoveAccountFromPool(ctx context.Context, id uuid.UUID, accountID models.AccountID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccountFromPool", ctx, id, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAccountFromPool indicates an expected call of RemoveAccountFromPool.
func (mr *MockEngineMockRecorder) RemoveAccountFromPool(ctx, id, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccountFromPool", reflect.TypeOf((*MockEngine)(nil).RemoveAccountFromPool), ctx, id, accountID)
}

// ResetConnector mocks base method.
func (m *MockEngine) ResetConnector(ctx context.Context, connectorID models.ConnectorID) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetConnector", ctx, connectorID)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetConnector indicates an expected call of ResetConnector.
func (mr *MockEngineMockRecorder) ResetConnector(ctx, connectorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetConnector", reflect.TypeOf((*MockEngine)(nil).ResetConnector), ctx, connectorID)
}

// ReversePayout mocks base method.
func (m *MockEngine) ReversePayout(ctx context.Context, reversal models.PaymentInitiationReversal, waitResult bool) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReversePayout", ctx, reversal, waitResult)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReversePayout indicates an expected call of ReversePayout.
func (mr *MockEngineMockRecorder) ReversePayout(ctx, reversal, waitResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReversePayout", reflect.TypeOf((*MockEngine)(nil).ReversePayout), ctx, reversal, waitResult)
}

// ReverseTransfer mocks base method.
func (m *MockEngine) ReverseTransfer(ctx context.Context, reversal models.PaymentInitiationReversal, waitResult bool) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReverseTransfer", ctx, reversal, waitResult)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseTransfer indicates an expected call of ReverseTransfer.
func (mr *MockEngineMockRecorder) ReverseTransfer(ctx, reversal, waitResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseTransfer", reflect.TypeOf((*MockEngine)(nil).ReverseTransfer), ctx, reversal, waitResult)
}

// UninstallConnector mocks base method.
func (m *MockEngine) UninstallConnector(ctx context.Context, connectorID models.ConnectorID) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallConnector", ctx, connectorID)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallConnector indicates an expected call of UninstallConnector.
func (mr *MockEngineMockRecorder) UninstallConnector(ctx, connectorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallConnector", reflect.TypeOf((*MockEngine)(nil).UninstallConnector), ctx, connectorID)
}

// UpdateConnector mocks base method.
func (m *MockEngine) UpdateConnector(ctx context.Context, connectorID models.ConnectorID, rawConfig json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnector", ctx, connectorID, rawConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConnector indicates an expected call of UpdateConnector.
func (mr *MockEngineMockRecorder) UpdateConnector(ctx, connectorID, rawConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnector", reflect.TypeOf((*MockEngine)(nil).UpdateConnector), ctx, connectorID, rawConfig)
}

// UpdateUserLink mocks base method.
func (m *MockEngine) UpdateUserLink(ctx context.Context, psuID uuid.UUID, connectorID models.ConnectorID, connectionID string, idempotencyKey *uuid.UUID, ClientRedirectURL *string) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLink", ctx, psuID, connectorID, connectionID, idempotencyKey, ClientRedirectURL)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserLink indicates an expected call of UpdateUserLink.
func (mr *MockEngineMockRecorder) UpdateUserLink(ctx, psuID, connectorID, connectionID, idempotencyKey, ClientRedirectURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLink", reflect.TypeOf((*MockEngine)(nil).UpdateUserLink), ctx, psuID, connectorID, connectionID, idempotencyKey, ClientRedirectURL)
}
