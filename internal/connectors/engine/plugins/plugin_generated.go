// Code generated by MockGen. DO NOT EDIT.
// Source: plugin.go
//
// Generated by this command:
//
//	mockgen -source plugin.go -destination plugin_generated.go -package plugins . Plugins
//

// Package plugins is a generated GoMock package.
package plugins

import (
	reflect "reflect"

	models "github.com/formancehq/payments/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockPlugins is a mock of Plugins interface.
type MockPlugins struct {
	ctrl     *gomock.Controller
	recorder *MockPluginsMockRecorder
}

// MockPluginsMockRecorder is the mock recorder for MockPlugins.
type MockPluginsMockRecorder struct {
	mock *MockPlugins
}

// NewMockPlugins creates a new mock instance.
func NewMockPlugins(ctrl *gomock.Controller) *MockPlugins {
	mock := &MockPlugins{ctrl: ctrl}
	mock.recorder = &MockPluginsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugins) EXPECT() *MockPluginsMockRecorder {
	return m.recorder
}

// AddCapabilities mocks base method.
func (m *MockPlugins) AddCapabilities(connectorID models.ConnectorID, capabilities []models.Capability) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCapabilities", connectorID, capabilities)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCapabilities indicates an expected call of AddCapabilities.
func (mr *MockPluginsMockRecorder) AddCapabilities(connectorID, capabilities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCapabilities", reflect.TypeOf((*MockPlugins)(nil).AddCapabilities), connectorID, capabilities)
}

// Get mocks base method.
func (m *MockPlugins) Get(connectorID models.ConnectorID) (models.Plugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", connectorID)
	ret0, _ := ret[0].(models.Plugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPluginsMockRecorder) Get(connectorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPlugins)(nil).Get), connectorID)
}

// GetCapabilities mocks base method.
func (m *MockPlugins) GetCapabilities(connectorID models.ConnectorID) (map[models.Capability]struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapabilities", connectorID)
	ret0, _ := ret[0].(map[models.Capability]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapabilities indicates an expected call of GetCapabilities.
func (mr *MockPluginsMockRecorder) GetCapabilities(connectorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapabilities", reflect.TypeOf((*MockPlugins)(nil).GetCapabilities), connectorID)
}

// GetConfig mocks base method.
func (m *MockPlugins) GetConfig(connectorID models.ConnectorID) (models.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", connectorID)
	ret0, _ := ret[0].(models.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockPluginsMockRecorder) GetConfig(connectorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockPlugins)(nil).GetConfig), connectorID)
}

// IsInstalled mocks base method.
func (m *MockPlugins) IsInstalled(connectorID models.ConnectorID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInstalled", connectorID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInstalled indicates an expected call of IsInstalled.
func (mr *MockPluginsMockRecorder) IsInstalled(connectorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInstalled", reflect.TypeOf((*MockPlugins)(nil).IsInstalled), connectorID)
}

// RegisterPlugin mocks base method.
func (m *MockPlugins) RegisterPlugin(connectorID models.ConnectorID, config models.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPlugin", connectorID, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterPlugin indicates an expected call of RegisterPlugin.
func (mr *MockPluginsMockRecorder) RegisterPlugin(connectorID, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPlugin", reflect.TypeOf((*MockPlugins)(nil).RegisterPlugin), connectorID, config)
}

// UnregisterPlugin mocks base method.
func (m *MockPlugins) UnregisterPlugin(connectorID models.ConnectorID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterPlugin", connectorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterPlugin indicates an expected call of UnregisterPlugin.
func (mr *MockPluginsMockRecorder) UnregisterPlugin(connectorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterPlugin", reflect.TypeOf((*MockPlugins)(nil).UnregisterPlugin), connectorID)
}
