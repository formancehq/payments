// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockClient) GetAccount(ctx context.Context, accountID string) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, accountID)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockClientMockRecorder) GetAccount(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockClient)(nil).GetAccount), ctx, accountID)
}

// GetAccounts mocks base method.
func (m *MockClient) GetAccounts(ctx context.Context, page, pageSize int, fromCreatedAt time.Time) ([]Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, page, pageSize, fromCreatedAt)
	ret0, _ := ret[0].([]Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockClientMockRecorder) GetAccounts(ctx, page, pageSize, fromCreatedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockClient)(nil).GetAccounts), ctx, page, pageSize, fromCreatedAt)
}

// GetBeneficiaries mocks base method.
func (m *MockClient) GetBeneficiaries(ctx context.Context, page, pageSize int, modifiedSince time.Time) ([]Beneficiary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeneficiaries", ctx, page, pageSize, modifiedSince)
	ret0, _ := ret[0].([]Beneficiary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeneficiaries indicates an expected call of GetBeneficiaries.
func (mr *MockClientMockRecorder) GetBeneficiaries(ctx, page, pageSize, modifiedSince any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeneficiaries", reflect.TypeOf((*MockClient)(nil).GetBeneficiaries), ctx, page, pageSize, modifiedSince)
}

// GetPayments mocks base method.
func (m *MockClient) GetPayments(ctx context.Context, paymentType PaymentType, page, pageSize int, modifiedSince time.Time) ([]Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayments", ctx, paymentType, page, pageSize, modifiedSince)
	ret0, _ := ret[0].([]Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayments indicates an expected call of GetPayments.
func (mr *MockClientMockRecorder) GetPayments(ctx, paymentType, page, pageSize, modifiedSince any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayments", reflect.TypeOf((*MockClient)(nil).GetPayments), ctx, paymentType, page, pageSize, modifiedSince)
}

// GetPayout mocks base method.
func (m *MockClient) GetPayout(ctx context.Context, payoutID string) (PayoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayout", ctx, payoutID)
	ret0, _ := ret[0].(PayoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayout indicates an expected call of GetPayout.
func (mr *MockClientMockRecorder) GetPayout(ctx, payoutID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayout", reflect.TypeOf((*MockClient)(nil).GetPayout), ctx, payoutID)
}

// GetTransactions mocks base method.
func (m *MockClient) GetTransactions(ctx context.Context, accountID string, page, pageSize int, fromTransactionDate time.Time) ([]Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, accountID, page, pageSize, fromTransactionDate)
	ret0, _ := ret[0].([]Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockClientMockRecorder) GetTransactions(ctx, accountID, page, pageSize, fromTransactionDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockClient)(nil).GetTransactions), ctx, accountID, page, pageSize, fromTransactionDate)
}

// GetTransfer mocks base method.
func (m *MockClient) GetTransfer(ctx context.Context, transferID string) (TransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfer", ctx, transferID)
	ret0, _ := ret[0].(TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfer indicates an expected call of GetTransfer.
func (mr *MockClientMockRecorder) GetTransfer(ctx, transferID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfer", reflect.TypeOf((*MockClient)(nil).GetTransfer), ctx, transferID)
}

// InitiatePayout mocks base method.
func (m *MockClient) InitiatePayout(ctx context.Context, payoutRequest *PayoutRequest) (*PayoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiatePayout", ctx, payoutRequest)
	ret0, _ := ret[0].(*PayoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiatePayout indicates an expected call of InitiatePayout.
func (mr *MockClientMockRecorder) InitiatePayout(ctx, payoutRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatePayout", reflect.TypeOf((*MockClient)(nil).InitiatePayout), ctx, payoutRequest)
}

// InitiateTransfer mocks base method.
func (m *MockClient) InitiateTransfer(ctx context.Context, transferRequest *TransferRequest) (*TransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateTransfer", ctx, transferRequest)
	ret0, _ := ret[0].(*TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateTransfer indicates an expected call of InitiateTransfer.
func (mr *MockClientMockRecorder) InitiateTransfer(ctx, transferRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateTransfer", reflect.TypeOf((*MockClient)(nil).InitiateTransfer), ctx, transferRequest)
}
