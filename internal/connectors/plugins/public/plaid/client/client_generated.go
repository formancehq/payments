// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	plaid "github.com/plaid/plaid-go/v34/plaid"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BaseWebhookTranslation mocks base method.
func (m *MockClient) BaseWebhookTranslation(body []byte) (BaseWebhooks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseWebhookTranslation", body)
	ret0, _ := ret[0].(BaseWebhooks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BaseWebhookTranslation indicates an expected call of BaseWebhookTranslation.
func (mr *MockClientMockRecorder) BaseWebhookTranslation(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseWebhookTranslation", reflect.TypeOf((*MockClient)(nil).BaseWebhookTranslation), body)
}

// CreateLinkToken mocks base method.
func (m *MockClient) CreateLinkToken(ctx context.Context, req CreateLinkTokenRequest) (CreateLinkTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLinkToken", ctx, req)
	ret0, _ := ret[0].(CreateLinkTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLinkToken indicates an expected call of CreateLinkToken.
func (mr *MockClientMockRecorder) CreateLinkToken(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkToken", reflect.TypeOf((*MockClient)(nil).CreateLinkToken), ctx, req)
}

// CreateUser mocks base method.
func (m *MockClient) CreateUser(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClientMockRecorder) CreateUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClient)(nil).CreateUser), ctx, userID)
}

// DeleteItem mocks base method.
func (m *MockClient) DeleteItem(ctx context.Context, req DeleteItemRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockClientMockRecorder) DeleteItem(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockClient)(nil).DeleteItem), ctx, req)
}

// DeleteUser mocks base method.
func (m *MockClient) DeleteUser(ctx context.Context, userToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockClientMockRecorder) DeleteUser(ctx, userToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockClient)(nil).DeleteUser), ctx, userToken)
}

// ExchangePublicToken mocks base method.
func (m *MockClient) ExchangePublicToken(ctx context.Context, req ExchangePublicTokenRequest) (ExchangePublicTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangePublicToken", ctx, req)
	ret0, _ := ret[0].(ExchangePublicTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangePublicToken indicates an expected call of ExchangePublicToken.
func (mr *MockClientMockRecorder) ExchangePublicToken(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangePublicToken", reflect.TypeOf((*MockClient)(nil).ExchangePublicToken), ctx, req)
}

// FormanceBankBridgeRedirect mocks base method.
func (m *MockClient) FormanceBankBridgeRedirect(ctx context.Context, req FormanceBankBridgeRedirectRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormanceBankBridgeRedirect", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// FormanceBankBridgeRedirect indicates an expected call of FormanceBankBridgeRedirect.
func (mr *MockClientMockRecorder) FormanceBankBridgeRedirect(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormanceBankBridgeRedirect", reflect.TypeOf((*MockClient)(nil).FormanceBankBridgeRedirect), ctx, req)
}

// GetWebhookVerificationKey mocks base method.
func (m *MockClient) GetWebhookVerificationKey(ctx context.Context, kid string) (*plaid.JWKPublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookVerificationKey", ctx, kid)
	ret0, _ := ret[0].(*plaid.JWKPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookVerificationKey indicates an expected call of GetWebhookVerificationKey.
func (mr *MockClientMockRecorder) GetWebhookVerificationKey(ctx, kid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookVerificationKey", reflect.TypeOf((*MockClient)(nil).GetWebhookVerificationKey), ctx, kid)
}

// ListTransactions mocks base method.
func (m *MockClient) ListTransactions(ctx context.Context, accessToken, cursor string, pageSize int) (plaid.TransactionsSyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", ctx, accessToken, cursor, pageSize)
	ret0, _ := ret[0].(plaid.TransactionsSyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockClientMockRecorder) ListTransactions(ctx, accessToken, cursor, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockClient)(nil).ListTransactions), ctx, accessToken, cursor, pageSize)
}

// TranslateItemAddResultWebhook mocks base method.
func (m *MockClient) TranslateItemAddResultWebhook(body []byte) (plaid.ItemAddResultWebhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateItemAddResultWebhook", body)
	ret0, _ := ret[0].(plaid.ItemAddResultWebhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateItemAddResultWebhook indicates an expected call of TranslateItemAddResultWebhook.
func (mr *MockClientMockRecorder) TranslateItemAddResultWebhook(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateItemAddResultWebhook", reflect.TypeOf((*MockClient)(nil).TranslateItemAddResultWebhook), body)
}

// UpdateLinkToken mocks base method.
func (m *MockClient) UpdateLinkToken(ctx context.Context, req UpdateLinkTokenRequest) (UpdateLinkTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLinkToken", ctx, req)
	ret0, _ := ret[0].(UpdateLinkTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLinkToken indicates an expected call of UpdateLinkToken.
func (mr *MockClientMockRecorder) UpdateLinkToken(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinkToken", reflect.TypeOf((*MockClient)(nil).UpdateLinkToken), ctx, req)
}
