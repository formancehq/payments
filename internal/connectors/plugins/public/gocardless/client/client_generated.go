// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	models "github.com/formancehq/payments/internal/models"
	gocardless "github.com/gocardless/gocardless-pro-go/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateCreditorBankAccount mocks base method.
func (m *MockClient) CreateCreditorBankAccount(ctx context.Context, creditor string, ba models.BankAccount) (GocardlessGenericAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCreditorBankAccount", ctx, creditor, ba)
	ret0, _ := ret[0].(GocardlessGenericAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCreditorBankAccount indicates an expected call of CreateCreditorBankAccount.
func (mr *MockClientMockRecorder) CreateCreditorBankAccount(ctx, creditor, ba any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCreditorBankAccount", reflect.TypeOf((*MockClient)(nil).CreateCreditorBankAccount), ctx, creditor, ba)
}

// CreateCustomerBankAccount mocks base method.
func (m *MockClient) CreateCustomerBankAccount(ctx context.Context, customer string, ba models.BankAccount) (GocardlessGenericAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerBankAccount", ctx, customer, ba)
	ret0, _ := ret[0].(GocardlessGenericAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerBankAccount indicates an expected call of CreateCustomerBankAccount.
func (mr *MockClientMockRecorder) CreateCustomerBankAccount(ctx, customer, ba any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerBankAccount", reflect.TypeOf((*MockClient)(nil).CreateCustomerBankAccount), ctx, customer, ba)
}

// GetCreditors mocks base method.
func (m *MockClient) GetCreditors(ctx context.Context, pageSize int, after string) ([]GocardlessUser, Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreditors", ctx, pageSize, after)
	ret0, _ := ret[0].([]GocardlessUser)
	ret1, _ := ret[1].(Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCreditors indicates an expected call of GetCreditors.
func (mr *MockClientMockRecorder) GetCreditors(ctx, pageSize, after any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreditors", reflect.TypeOf((*MockClient)(nil).GetCreditors), ctx, pageSize, after)
}

// GetCustomers mocks base method.
func (m *MockClient) GetCustomers(ctx context.Context, pageSize int, after string) ([]GocardlessUser, Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomers", ctx, pageSize, after)
	ret0, _ := ret[0].([]GocardlessUser)
	ret1, _ := ret[1].(Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCustomers indicates an expected call of GetCustomers.
func (mr *MockClientMockRecorder) GetCustomers(ctx, pageSize, after any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomers", reflect.TypeOf((*MockClient)(nil).GetCustomers), ctx, pageSize, after)
}

// GetExternalAccounts mocks base method.
func (m *MockClient) GetExternalAccounts(ctx context.Context, ownerID string, pageSize int, after string) ([]GocardlessGenericAccount, Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalAccounts", ctx, ownerID, pageSize, after)
	ret0, _ := ret[0].([]GocardlessGenericAccount)
	ret1, _ := ret[1].(Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExternalAccounts indicates an expected call of GetExternalAccounts.
func (mr *MockClientMockRecorder) GetExternalAccounts(ctx, ownerID, pageSize, after any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalAccounts", reflect.TypeOf((*MockClient)(nil).GetExternalAccounts), ctx, ownerID, pageSize, after)
}

// GetMandate mocks base method.
func (m *MockClient) GetMandate(ctx context.Context, mandateId string) (*gocardless.Mandate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMandate", ctx, mandateId)
	ret0, _ := ret[0].(*gocardless.Mandate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMandate indicates an expected call of GetMandate.
func (mr *MockClientMockRecorder) GetMandate(ctx, mandateId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMandate", reflect.TypeOf((*MockClient)(nil).GetMandate), ctx, mandateId)
}

// GetPayments mocks base method.
func (m *MockClient) GetPayments(ctx context.Context, pageSize int, after string) ([]GocardlessPayment, Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayments", ctx, pageSize, after)
	ret0, _ := ret[0].([]GocardlessPayment)
	ret1, _ := ret[1].(Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPayments indicates an expected call of GetPayments.
func (mr *MockClientMockRecorder) GetPayments(ctx, pageSize, after any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayments", reflect.TypeOf((*MockClient)(nil).GetPayments), ctx, pageSize, after)
}

// NewWithService mocks base method.
func (m *MockClient) NewWithService(service GoCardlessService) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewWithService", service)
}

// NewWithService indicates an expected call of NewWithService.
func (mr *MockClientMockRecorder) NewWithService(service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWithService", reflect.TypeOf((*MockClient)(nil).NewWithService), service)
}

// MockGoCardlessService is a mock of GoCardlessService interface.
type MockGoCardlessService struct {
	ctrl     *gomock.Controller
	recorder *MockGoCardlessServiceMockRecorder
	isgomock struct{}
}

// MockGoCardlessServiceMockRecorder is the mock recorder for MockGoCardlessService.
type MockGoCardlessServiceMockRecorder struct {
	mock *MockGoCardlessService
}

// NewMockGoCardlessService creates a new mock instance.
func NewMockGoCardlessService(ctrl *gomock.Controller) *MockGoCardlessService {
	mock := &MockGoCardlessService{ctrl: ctrl}
	mock.recorder = &MockGoCardlessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoCardlessService) EXPECT() *MockGoCardlessServiceMockRecorder {
	return m.recorder
}

// CreateGocardlessCreditorBankAccount mocks base method.
func (m *MockGoCardlessService) CreateGocardlessCreditorBankAccount(ctx context.Context, params gocardless.CreditorBankAccountCreateParams, opts ...gocardless.RequestOption) (*gocardless.CreditorBankAccount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGocardlessCreditorBankAccount", varargs...)
	ret0, _ := ret[0].(*gocardless.CreditorBankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGocardlessCreditorBankAccount indicates an expected call of CreateGocardlessCreditorBankAccount.
func (mr *MockGoCardlessServiceMockRecorder) CreateGocardlessCreditorBankAccount(ctx, params any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGocardlessCreditorBankAccount", reflect.TypeOf((*MockGoCardlessService)(nil).CreateGocardlessCreditorBankAccount), varargs...)
}

// CreateGocardlessCustomerBankAccount mocks base method.
func (m *MockGoCardlessService) CreateGocardlessCustomerBankAccount(ctx context.Context, params gocardless.CustomerBankAccountCreateParams, opts ...gocardless.RequestOption) (*gocardless.CustomerBankAccount, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGocardlessCustomerBankAccount", varargs...)
	ret0, _ := ret[0].(*gocardless.CustomerBankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGocardlessCustomerBankAccount indicates an expected call of CreateGocardlessCustomerBankAccount.
func (mr *MockGoCardlessServiceMockRecorder) CreateGocardlessCustomerBankAccount(ctx, params any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGocardlessCustomerBankAccount", reflect.TypeOf((*MockGoCardlessService)(nil).CreateGocardlessCustomerBankAccount), varargs...)
}

// GetGocardlessCreditorBankAccounts mocks base method.
func (m *MockGoCardlessService) GetGocardlessCreditorBankAccounts(ctx context.Context, params gocardless.CreditorBankAccountListParams, opts ...gocardless.RequestOption) (*gocardless.CreditorBankAccountListResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGocardlessCreditorBankAccounts", varargs...)
	ret0, _ := ret[0].(*gocardless.CreditorBankAccountListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGocardlessCreditorBankAccounts indicates an expected call of GetGocardlessCreditorBankAccounts.
func (mr *MockGoCardlessServiceMockRecorder) GetGocardlessCreditorBankAccounts(ctx, params any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGocardlessCreditorBankAccounts", reflect.TypeOf((*MockGoCardlessService)(nil).GetGocardlessCreditorBankAccounts), varargs...)
}

// GetGocardlessCreditors mocks base method.
func (m *MockGoCardlessService) GetGocardlessCreditors(ctx context.Context, params gocardless.CreditorListParams, opts ...gocardless.RequestOption) (*gocardless.CreditorListResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGocardlessCreditors", varargs...)
	ret0, _ := ret[0].(*gocardless.CreditorListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGocardlessCreditors indicates an expected call of GetGocardlessCreditors.
func (mr *MockGoCardlessServiceMockRecorder) GetGocardlessCreditors(ctx, params any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGocardlessCreditors", reflect.TypeOf((*MockGoCardlessService)(nil).GetGocardlessCreditors), varargs...)
}

// GetGocardlessCustomerBankAccounts mocks base method.
func (m *MockGoCardlessService) GetGocardlessCustomerBankAccounts(ctx context.Context, params gocardless.CustomerBankAccountListParams, opts ...gocardless.RequestOption) (*gocardless.CustomerBankAccountListResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGocardlessCustomerBankAccounts", varargs...)
	ret0, _ := ret[0].(*gocardless.CustomerBankAccountListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGocardlessCustomerBankAccounts indicates an expected call of GetGocardlessCustomerBankAccounts.
func (mr *MockGoCardlessServiceMockRecorder) GetGocardlessCustomerBankAccounts(ctx, params any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGocardlessCustomerBankAccounts", reflect.TypeOf((*MockGoCardlessService)(nil).GetGocardlessCustomerBankAccounts), varargs...)
}

// GetGocardlessCustomers mocks base method.
func (m *MockGoCardlessService) GetGocardlessCustomers(ctx context.Context, params gocardless.CustomerListParams, opts ...gocardless.RequestOption) (*gocardless.CustomerListResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGocardlessCustomers", varargs...)
	ret0, _ := ret[0].(*gocardless.CustomerListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGocardlessCustomers indicates an expected call of GetGocardlessCustomers.
func (mr *MockGoCardlessServiceMockRecorder) GetGocardlessCustomers(ctx, params any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGocardlessCustomers", reflect.TypeOf((*MockGoCardlessService)(nil).GetGocardlessCustomers), varargs...)
}

// GetGocardlessPayments mocks base method.
func (m *MockGoCardlessService) GetGocardlessPayments(ctx context.Context, p gocardless.PaymentListParams, opts ...gocardless.RequestOption) (*gocardless.PaymentListResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, p}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGocardlessPayments", varargs...)
	ret0, _ := ret[0].(*gocardless.PaymentListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGocardlessPayments indicates an expected call of GetGocardlessPayments.
func (mr *MockGoCardlessServiceMockRecorder) GetGocardlessPayments(ctx, p any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, p}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGocardlessPayments", reflect.TypeOf((*MockGoCardlessService)(nil).GetGocardlessPayments), varargs...)
}

// GetGocardlessPayout mocks base method.
func (m *MockGoCardlessService) GetGocardlessPayout(ctx context.Context, identity string, opts ...gocardless.RequestOption) (*gocardless.Payout, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, identity}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGocardlessPayout", varargs...)
	ret0, _ := ret[0].(*gocardless.Payout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGocardlessPayout indicates an expected call of GetGocardlessPayout.
func (mr *MockGoCardlessServiceMockRecorder) GetGocardlessPayout(ctx, identity any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, identity}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGocardlessPayout", reflect.TypeOf((*MockGoCardlessService)(nil).GetGocardlessPayout), varargs...)
}

// GetMandate mocks base method.
func (m *MockGoCardlessService) GetMandate(ctx context.Context, identity string, opts ...gocardless.RequestOption) (*gocardless.Mandate, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, identity}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMandate", varargs...)
	ret0, _ := ret[0].(*gocardless.Mandate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMandate indicates an expected call of GetMandate.
func (mr *MockGoCardlessServiceMockRecorder) GetMandate(ctx, identity any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, identity}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMandate", reflect.TypeOf((*MockGoCardlessService)(nil).GetMandate), varargs...)
}
