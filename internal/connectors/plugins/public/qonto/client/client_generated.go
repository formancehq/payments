// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAccountBalances mocks base method.
func (m *MockClient) GetAccountBalances(ctx context.Context) ([]*Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalances", ctx)
	ret0, _ := ret[0].([]*Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalances indicates an expected call of GetAccountBalances.
func (mr *MockClientMockRecorder) GetAccountBalances(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalances", reflect.TypeOf((*MockClient)(nil).GetAccountBalances), ctx)
}

// GetExternalAccounts mocks base method.
func (m *MockClient) GetExternalAccounts(ctx context.Context, page, pageSize int) ([]*ExternalAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalAccounts", ctx, page, pageSize)
	ret0, _ := ret[0].([]*ExternalAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalAccounts indicates an expected call of GetExternalAccounts.
func (mr *MockClientMockRecorder) GetExternalAccounts(ctx, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalAccounts", reflect.TypeOf((*MockClient)(nil).GetExternalAccounts), ctx, page, pageSize)
}

// GetOrganization mocks base method.
func (m *MockClient) GetOrganization(ctx context.Context) (*Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", ctx)
	ret0, _ := ret[0].(*Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockClientMockRecorder) GetOrganization(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockClient)(nil).GetOrganization), ctx)
}

// GetTransactions mocks base method.
func (m *MockClient) GetTransactions(ctx context.Context, page, pageSize int) ([]*Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, page, pageSize)
	ret0, _ := ret[0].([]*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockClientMockRecorder) GetTransactions(ctx, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockClient)(nil).GetTransactions), ctx, page, pageSize)
}

// InitiatePayout mocks base method.
func (m *MockClient) InitiatePayout(ctx context.Context, pr *PayoutRequest) (*PayoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiatePayout", ctx, pr)
	ret0, _ := ret[0].(*PayoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiatePayout indicates an expected call of InitiatePayout.
func (mr *MockClientMockRecorder) InitiatePayout(ctx, pr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatePayout", reflect.TypeOf((*MockClient)(nil).InitiatePayout), ctx, pr)
}

// InitiateTransfer mocks base method.
func (m *MockClient) InitiateTransfer(ctx context.Context, tr *TransferRequest) (*TransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateTransfer", ctx, tr)
	ret0, _ := ret[0].(*TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateTransfer indicates an expected call of InitiateTransfer.
func (mr *MockClientMockRecorder) InitiateTransfer(ctx, tr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateTransfer", reflect.TypeOf((*MockClient)(nil).InitiateTransfer), ctx, tr)
}
