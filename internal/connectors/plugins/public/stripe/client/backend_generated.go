// Code generated by MockGen. DO NOT EDIT.
// Source: backend.go
//
// Generated by this command:
//
//	mockgen -source backend.go -destination backend_generated.go -package client . Backend
//

// Package client is a generated GoMock package.
package client

import (
	bytes "bytes"
	reflect "reflect"

	stripe "github.com/stripe/stripe-go/v79"
	form "github.com/stripe/stripe-go/v79/form"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
	isgomock struct{}
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockBackend) Call(method, path, key string, params stripe.ParamsContainer, v stripe.LastResponseSetter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", method, path, key, params, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockBackendMockRecorder) Call(method, path, key, params, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockBackend)(nil).Call), method, path, key, params, v)
}

// CallMultipart mocks base method.
func (m *MockBackend) CallMultipart(method, path, key, boundary string, body *bytes.Buffer, params *stripe.Params, v stripe.LastResponseSetter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallMultipart", method, path, key, boundary, body, params, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallMultipart indicates an expected call of CallMultipart.
func (mr *MockBackendMockRecorder) CallMultipart(method, path, key, boundary, body, params, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallMultipart", reflect.TypeOf((*MockBackend)(nil).CallMultipart), method, path, key, boundary, body, params, v)
}

// CallRaw mocks base method.
func (m *MockBackend) CallRaw(method, path, key string, body *form.Values, params *stripe.Params, v stripe.LastResponseSetter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallRaw", method, path, key, body, params, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallRaw indicates an expected call of CallRaw.
func (mr *MockBackendMockRecorder) CallRaw(method, path, key, body, params, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallRaw", reflect.TypeOf((*MockBackend)(nil).CallRaw), method, path, key, body, params, v)
}

// CallStreaming mocks base method.
func (m *MockBackend) CallStreaming(method, path, key string, params stripe.ParamsContainer, v stripe.StreamingLastResponseSetter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallStreaming", method, path, key, params, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallStreaming indicates an expected call of CallStreaming.
func (mr *MockBackendMockRecorder) CallStreaming(method, path, key, params, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallStreaming", reflect.TypeOf((*MockBackend)(nil).CallStreaming), method, path, key, params, v)
}

// SetMaxNetworkRetries mocks base method.
func (m *MockBackend) SetMaxNetworkRetries(maxNetworkRetries int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxNetworkRetries", maxNetworkRetries)
}

// SetMaxNetworkRetries indicates an expected call of SetMaxNetworkRetries.
func (mr *MockBackendMockRecorder) SetMaxNetworkRetries(maxNetworkRetries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxNetworkRetries", reflect.TypeOf((*MockBackend)(nil).SetMaxNetworkRetries), maxNetworkRetries)
}
