// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockClient) GetAccount(ctx context.Context, accountID string) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, accountID)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockClientMockRecorder) GetAccount(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockClient)(nil).GetAccount), ctx, accountID)
}

// GetAccounts mocks base method.
func (m *MockClient) GetAccounts(ctx context.Context, page, pageSize int, fromOpeningDate time.Time) ([]Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, page, pageSize, fromOpeningDate)
	ret0, _ := ret[0].([]Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockClientMockRecorder) GetAccounts(ctx, page, pageSize, fromOpeningDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockClient)(nil).GetAccounts), ctx, page, pageSize, fromOpeningDate)
}

// GetPayment mocks base method.
func (m *MockClient) GetPayment(ctx context.Context, paymentID string) (*Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", ctx, paymentID)
	ret0, _ := ret[0].(*Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockClientMockRecorder) GetPayment(ctx, paymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockClient)(nil).GetPayment), ctx, paymentID)
}

// GetPaymentStatus mocks base method.
func (m *MockClient) GetPaymentStatus(ctx context.Context, paymentID string) (*StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentStatus", ctx, paymentID)
	ret0, _ := ret[0].(*StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentStatus indicates an expected call of GetPaymentStatus.
func (mr *MockClientMockRecorder) GetPaymentStatus(ctx, paymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentStatus", reflect.TypeOf((*MockClient)(nil).GetPaymentStatus), ctx, paymentID)
}

// GetPayments mocks base method.
func (m *MockClient) GetPayments(ctx context.Context, page, pageSize int) ([]Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayments", ctx, page, pageSize)
	ret0, _ := ret[0].([]Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayments indicates an expected call of GetPayments.
func (mr *MockClientMockRecorder) GetPayments(ctx, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayments", reflect.TypeOf((*MockClient)(nil).GetPayments), ctx, page, pageSize)
}

// InitiateTransferOrPayouts mocks base method.
func (m *MockClient) InitiateTransferOrPayouts(ctx context.Context, transferRequest *PaymentRequest) (*PaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateTransferOrPayouts", ctx, transferRequest)
	ret0, _ := ret[0].(*PaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateTransferOrPayouts indicates an expected call of InitiateTransferOrPayouts.
func (mr *MockClientMockRecorder) InitiateTransferOrPayouts(ctx, transferRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateTransferOrPayouts", reflect.TypeOf((*MockClient)(nil).InitiateTransferOrPayouts), ctx, transferRequest)
}
