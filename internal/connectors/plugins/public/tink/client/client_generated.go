// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateTemporaryAuthorizationCode mocks base method.
func (m *MockClient) CreateTemporaryAuthorizationCode(ctx context.Context, request CreateTemporaryCodeRequest) (CreateTemporaryCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemporaryAuthorizationCode", ctx, request)
	ret0, _ := ret[0].(CreateTemporaryCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemporaryAuthorizationCode indicates an expected call of CreateTemporaryAuthorizationCode.
func (mr *MockClientMockRecorder) CreateTemporaryAuthorizationCode(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemporaryAuthorizationCode", reflect.TypeOf((*MockClient)(nil).CreateTemporaryAuthorizationCode), ctx, request)
}

// CreateUser mocks base method.
func (m *MockClient) CreateUser(ctx context.Context, userID, market string) (CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userID, market)
	ret0, _ := ret[0].(CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClientMockRecorder) CreateUser(ctx, userID, market any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClient)(nil).CreateUser), ctx, userID, market)
}

// CreateWebhook mocks base method.
func (m *MockClient) CreateWebhook(ctx context.Context, eventType WebhookEventType, connectorID, url string) (CreateWebhookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhook", ctx, eventType, connectorID, url)
	ret0, _ := ret[0].(CreateWebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhook indicates an expected call of CreateWebhook.
func (mr *MockClientMockRecorder) CreateWebhook(ctx, eventType, connectorID, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*MockClient)(nil).CreateWebhook), ctx, eventType, connectorID, url)
}

// DeleteUser mocks base method.
func (m *MockClient) DeleteUser(ctx context.Context, req DeleteUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockClientMockRecorder) DeleteUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockClient)(nil).DeleteUser), ctx, req)
}

// DeleteUserConnection mocks base method.
func (m *MockClient) DeleteUserConnection(ctx context.Context, req DeleteUserConnectionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserConnection", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserConnection indicates an expected call of DeleteUserConnection.
func (mr *MockClientMockRecorder) DeleteUserConnection(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserConnection", reflect.TypeOf((*MockClient)(nil).DeleteUserConnection), ctx, req)
}

// DeleteWebhook mocks base method.
func (m *MockClient) DeleteWebhook(ctx context.Context, webhookID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhook", ctx, webhookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebhook indicates an expected call of DeleteWebhook.
func (mr *MockClientMockRecorder) DeleteWebhook(ctx, webhookID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*MockClient)(nil).DeleteWebhook), ctx, webhookID)
}

// GetAccountCreatedWebhook mocks base method.
func (m *MockClient) GetAccountCreatedWebhook(ctx context.Context, payload []byte) (AccountCreatedWebhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountCreatedWebhook", ctx, payload)
	ret0, _ := ret[0].(AccountCreatedWebhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountCreatedWebhook indicates an expected call of GetAccountCreatedWebhook.
func (mr *MockClientMockRecorder) GetAccountCreatedWebhook(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountCreatedWebhook", reflect.TypeOf((*MockClient)(nil).GetAccountCreatedWebhook), ctx, payload)
}

// GetAccountTransactionsDeletedWebhook mocks base method.
func (m *MockClient) GetAccountTransactionsDeletedWebhook(ctx context.Context, payload []byte) (AccountTransactionsDeletedWebhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTransactionsDeletedWebhook", ctx, payload)
	ret0, _ := ret[0].(AccountTransactionsDeletedWebhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTransactionsDeletedWebhook indicates an expected call of GetAccountTransactionsDeletedWebhook.
func (mr *MockClientMockRecorder) GetAccountTransactionsDeletedWebhook(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTransactionsDeletedWebhook", reflect.TypeOf((*MockClient)(nil).GetAccountTransactionsDeletedWebhook), ctx, payload)
}

// GetAccountTransactionsModifiedWebhook mocks base method.
func (m *MockClient) GetAccountTransactionsModifiedWebhook(ctx context.Context, payload []byte) (AccountTransactionsModifiedWebhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTransactionsModifiedWebhook", ctx, payload)
	ret0, _ := ret[0].(AccountTransactionsModifiedWebhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTransactionsModifiedWebhook indicates an expected call of GetAccountTransactionsModifiedWebhook.
func (mr *MockClientMockRecorder) GetAccountTransactionsModifiedWebhook(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTransactionsModifiedWebhook", reflect.TypeOf((*MockClient)(nil).GetAccountTransactionsModifiedWebhook), ctx, payload)
}

// GetRefreshFinishedWebhook mocks base method.
func (m *MockClient) GetRefreshFinishedWebhook(ctx context.Context, payload []byte) (RefreshFinishedWebhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshFinishedWebhook", ctx, payload)
	ret0, _ := ret[0].(RefreshFinishedWebhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshFinishedWebhook indicates an expected call of GetRefreshFinishedWebhook.
func (mr *MockClientMockRecorder) GetRefreshFinishedWebhook(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshFinishedWebhook", reflect.TypeOf((*MockClient)(nil).GetRefreshFinishedWebhook), ctx, payload)
}

// ListAccounts mocks base method.
func (m *MockClient) ListAccounts(ctx context.Context, userID, nextPageToken string) (ListAccountsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx, userID, nextPageToken)
	ret0, _ := ret[0].(ListAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockClientMockRecorder) ListAccounts(ctx, userID, nextPageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockClient)(nil).ListAccounts), ctx, userID, nextPageToken)
}

// ListTransactions mocks base method.
func (m *MockClient) ListTransactions(ctx context.Context, req ListTransactionRequest) (ListTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", ctx, req)
	ret0, _ := ret[0].(ListTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockClientMockRecorder) ListTransactions(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockClient)(nil).ListTransactions), ctx, req)
}
