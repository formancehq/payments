// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAccountBalances mocks base method.
func (m *MockClient) GetAccountBalances(ctx context.Context, accountID string) ([]*Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalances", ctx, accountID)
	ret0, _ := ret[0].([]*Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalances indicates an expected call of GetAccountBalances.
func (mr *MockClientMockRecorder) GetAccountBalances(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalances", reflect.TypeOf((*MockClient)(nil).GetAccountBalances), ctx, accountID)
}

// GetAccounts mocks base method.
func (m *MockClient) GetAccounts(ctx context.Context, page, pageSize int) ([]*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, page, pageSize)
	ret0, _ := ret[0].([]*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockClientMockRecorder) GetAccounts(ctx, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockClient)(nil).GetAccounts), ctx, page, pageSize)
}

// GetRecipients mocks base method.
func (m *MockClient) GetRecipients(ctx context.Context, accountID string, page, pageSize int) ([]*Recipient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipients", ctx, accountID, page, pageSize)
	ret0, _ := ret[0].([]*Recipient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipients indicates an expected call of GetRecipients.
func (mr *MockClientMockRecorder) GetRecipients(ctx, accountID, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipients", reflect.TypeOf((*MockClient)(nil).GetRecipients), ctx, accountID, page, pageSize)
}

// GetTransactions mocks base method.
func (m *MockClient) GetTransactions(ctx context.Context, accountID string, page, pageSize int, lastCreatedAt time.Time) ([]*Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, accountID, page, pageSize, lastCreatedAt)
	ret0, _ := ret[0].([]*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockClientMockRecorder) GetTransactions(ctx, accountID, page, pageSize, lastCreatedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockClient)(nil).GetTransactions), ctx, accountID, page, pageSize, lastCreatedAt)
}
