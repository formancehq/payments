// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAccounts mocks base method.
func (m *MockClient) GetAccounts(ctx context.Context, page, pageSize int) ([]*Account, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, page, pageSize)
	ret0, _ := ret[0].([]*Account)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockClientMockRecorder) GetAccounts(ctx, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockClient)(nil).GetAccounts), ctx, page, pageSize)
}

// GetBalances mocks base method.
func (m *MockClient) GetBalances(ctx context.Context, page, pageSize int) ([]*Balance, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalances", ctx, page, pageSize)
	ret0, _ := ret[0].([]*Balance)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBalances indicates an expected call of GetBalances.
func (mr *MockClientMockRecorder) GetBalances(ctx, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalances", reflect.TypeOf((*MockClient)(nil).GetBalances), ctx, page, pageSize)
}

// GetBeneficiaries mocks base method.
func (m *MockClient) GetBeneficiaries(ctx context.Context, page, pageSize int) ([]*Beneficiary, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeneficiaries", ctx, page, pageSize)
	ret0, _ := ret[0].([]*Beneficiary)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBeneficiaries indicates an expected call of GetBeneficiaries.
func (mr *MockClientMockRecorder) GetBeneficiaries(ctx, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeneficiaries", reflect.TypeOf((*MockClient)(nil).GetBeneficiaries), ctx, page, pageSize)
}

// GetContactID mocks base method.
func (m *MockClient) GetContactID(ctx context.Context, accountID string) (*Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactID", ctx, accountID)
	ret0, _ := ret[0].(*Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactID indicates an expected call of GetContactID.
func (mr *MockClientMockRecorder) GetContactID(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactID", reflect.TypeOf((*MockClient)(nil).GetContactID), ctx, accountID)
}

// GetTransactions mocks base method.
func (m *MockClient) GetTransactions(ctx context.Context, page, pageSize int, updatedAtFrom time.Time) ([]Transaction, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, page, pageSize, updatedAtFrom)
	ret0, _ := ret[0].([]Transaction)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockClientMockRecorder) GetTransactions(ctx, page, pageSize, updatedAtFrom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockClient)(nil).GetTransactions), ctx, page, pageSize, updatedAtFrom)
}
