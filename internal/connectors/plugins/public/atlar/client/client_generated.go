// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	accounts "github.com/get-momo/atlar-v1-go-client/client/accounts"
	counterparties "github.com/get-momo/atlar-v1-go-client/client/counterparties"
	credit_transfers "github.com/get-momo/atlar-v1-go-client/client/credit_transfers"
	external_accounts "github.com/get-momo/atlar-v1-go-client/client/external_accounts"
	third_parties "github.com/get-momo/atlar-v1-go-client/client/third_parties"
	transactions "github.com/get-momo/atlar-v1-go-client/client/transactions"
	models "github.com/get-momo/atlar-v1-go-client/models"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetV1Accounts mocks base method.
func (m *MockClient) GetV1Accounts(ctx context.Context, token string, pageSize int64) (*accounts.GetV1AccountsOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1Accounts", ctx, token, pageSize)
	ret0, _ := ret[0].(*accounts.GetV1AccountsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1Accounts indicates an expected call of GetV1Accounts.
func (mr *MockClientMockRecorder) GetV1Accounts(ctx, token, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1Accounts", reflect.TypeOf((*MockClient)(nil).GetV1Accounts), ctx, token, pageSize)
}

// GetV1AccountsID mocks base method.
func (m *MockClient) GetV1AccountsID(ctx context.Context, id string) (*accounts.GetV1AccountsIDOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1AccountsID", ctx, id)
	ret0, _ := ret[0].(*accounts.GetV1AccountsIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1AccountsID indicates an expected call of GetV1AccountsID.
func (mr *MockClientMockRecorder) GetV1AccountsID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1AccountsID", reflect.TypeOf((*MockClient)(nil).GetV1AccountsID), ctx, id)
}

// GetV1BetaThirdPartiesID mocks base method.
func (m *MockClient) GetV1BetaThirdPartiesID(ctx context.Context, id string) (*third_parties.GetV1betaThirdPartiesIDOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1BetaThirdPartiesID", ctx, id)
	ret0, _ := ret[0].(*third_parties.GetV1betaThirdPartiesIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1BetaThirdPartiesID indicates an expected call of GetV1BetaThirdPartiesID.
func (mr *MockClientMockRecorder) GetV1BetaThirdPartiesID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1BetaThirdPartiesID", reflect.TypeOf((*MockClient)(nil).GetV1BetaThirdPartiesID), ctx, id)
}

// GetV1CounterpartiesID mocks base method.
func (m *MockClient) GetV1CounterpartiesID(ctx context.Context, counterPartyID string) (*counterparties.GetV1CounterpartiesIDOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1CounterpartiesID", ctx, counterPartyID)
	ret0, _ := ret[0].(*counterparties.GetV1CounterpartiesIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1CounterpartiesID indicates an expected call of GetV1CounterpartiesID.
func (mr *MockClientMockRecorder) GetV1CounterpartiesID(ctx, counterPartyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1CounterpartiesID", reflect.TypeOf((*MockClient)(nil).GetV1CounterpartiesID), ctx, counterPartyID)
}

// GetV1CreditTransfersGetByExternalIDExternalID mocks base method.
func (m *MockClient) GetV1CreditTransfersGetByExternalIDExternalID(ctx context.Context, externalID string) (*credit_transfers.GetV1CreditTransfersGetByExternalIDExternalIDOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1CreditTransfersGetByExternalIDExternalID", ctx, externalID)
	ret0, _ := ret[0].(*credit_transfers.GetV1CreditTransfersGetByExternalIDExternalIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1CreditTransfersGetByExternalIDExternalID indicates an expected call of GetV1CreditTransfersGetByExternalIDExternalID.
func (mr *MockClientMockRecorder) GetV1CreditTransfersGetByExternalIDExternalID(ctx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1CreditTransfersGetByExternalIDExternalID", reflect.TypeOf((*MockClient)(nil).GetV1CreditTransfersGetByExternalIDExternalID), ctx, externalID)
}

// GetV1ExternalAccounts mocks base method.
func (m *MockClient) GetV1ExternalAccounts(ctx context.Context, token string, pageSize int64) (*external_accounts.GetV1ExternalAccountsOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1ExternalAccounts", ctx, token, pageSize)
	ret0, _ := ret[0].(*external_accounts.GetV1ExternalAccountsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1ExternalAccounts indicates an expected call of GetV1ExternalAccounts.
func (mr *MockClientMockRecorder) GetV1ExternalAccounts(ctx, token, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1ExternalAccounts", reflect.TypeOf((*MockClient)(nil).GetV1ExternalAccounts), ctx, token, pageSize)
}

// GetV1ExternalAccountsID mocks base method.
func (m *MockClient) GetV1ExternalAccountsID(ctx context.Context, externalAccountID string) (*external_accounts.GetV1ExternalAccountsIDOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1ExternalAccountsID", ctx, externalAccountID)
	ret0, _ := ret[0].(*external_accounts.GetV1ExternalAccountsIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1ExternalAccountsID indicates an expected call of GetV1ExternalAccountsID.
func (mr *MockClientMockRecorder) GetV1ExternalAccountsID(ctx, externalAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1ExternalAccountsID", reflect.TypeOf((*MockClient)(nil).GetV1ExternalAccountsID), ctx, externalAccountID)
}

// GetV1Transactions mocks base method.
func (m *MockClient) GetV1Transactions(ctx context.Context, token string, pageSize int64) (*transactions.GetV1TransactionsOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1Transactions", ctx, token, pageSize)
	ret0, _ := ret[0].(*transactions.GetV1TransactionsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1Transactions indicates an expected call of GetV1Transactions.
func (mr *MockClientMockRecorder) GetV1Transactions(ctx, token, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1Transactions", reflect.TypeOf((*MockClient)(nil).GetV1Transactions), ctx, token, pageSize)
}

// GetV1TransactionsID mocks base method.
func (m *MockClient) GetV1TransactionsID(ctx context.Context, id string) (*transactions.GetV1TransactionsIDOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1TransactionsID", ctx, id)
	ret0, _ := ret[0].(*transactions.GetV1TransactionsIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1TransactionsID indicates an expected call of GetV1TransactionsID.
func (mr *MockClientMockRecorder) GetV1TransactionsID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1TransactionsID", reflect.TypeOf((*MockClient)(nil).GetV1TransactionsID), ctx, id)
}

// PostV1CounterParties mocks base method.
func (m *MockClient) PostV1CounterParties(ctx context.Context, createCounterpartyRequest models.CreateCounterpartyRequest) (*counterparties.PostV1CounterpartiesCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostV1CounterParties", ctx, createCounterpartyRequest)
	ret0, _ := ret[0].(*counterparties.PostV1CounterpartiesCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV1CounterParties indicates an expected call of PostV1CounterParties.
func (mr *MockClientMockRecorder) PostV1CounterParties(ctx, createCounterpartyRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV1CounterParties", reflect.TypeOf((*MockClient)(nil).PostV1CounterParties), ctx, createCounterpartyRequest)
}

// PostV1CreditTransfers mocks base method.
func (m *MockClient) PostV1CreditTransfers(ctx context.Context, req *models.CreatePaymentRequest) (*credit_transfers.PostV1CreditTransfersCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostV1CreditTransfers", ctx, req)
	ret0, _ := ret[0].(*credit_transfers.PostV1CreditTransfersCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV1CreditTransfers indicates an expected call of PostV1CreditTransfers.
func (mr *MockClientMockRecorder) PostV1CreditTransfers(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV1CreditTransfers", reflect.TypeOf((*MockClient)(nil).PostV1CreditTransfers), ctx, req)
}

// MockErrorCodeReader is a mock of ErrorCodeReader interface.
type MockErrorCodeReader struct {
	ctrl     *gomock.Controller
	recorder *MockErrorCodeReaderMockRecorder
}

// MockErrorCodeReaderMockRecorder is the mock recorder for MockErrorCodeReader.
type MockErrorCodeReaderMockRecorder struct {
	mock *MockErrorCodeReader
}

// NewMockErrorCodeReader creates a new mock instance.
func NewMockErrorCodeReader(ctrl *gomock.Controller) *MockErrorCodeReader {
	mock := &MockErrorCodeReader{ctrl: ctrl}
	mock.recorder = &MockErrorCodeReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorCodeReader) EXPECT() *MockErrorCodeReaderMockRecorder {
	return m.recorder
}

// Code mocks base method.
func (m *MockErrorCodeReader) Code() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code")
	ret0, _ := ret[0].(int)
	return ret0
}

// Code indicates an expected call of Code.
func (mr *MockErrorCodeReaderMockRecorder) Code() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockErrorCodeReader)(nil).Code))
}
