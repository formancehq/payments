// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	models "github.com/formancehq/payments/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CompleteLink mocks base method.
func (m *MockClient) CompleteLink(ctx context.Context, userID, connectionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteLink", ctx, userID, connectionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteLink indicates an expected call of CompleteLink.
func (mr *MockClientMockRecorder) CompleteLink(ctx, userID, connectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteLink", reflect.TypeOf((*MockClient)(nil).CompleteLink), ctx, userID, connectionID)
}

// CreateUser mocks base method.
func (m *MockClient) CreateUser(ctx context.Context, user models.PSPPaymentServiceUser) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClientMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClient)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockClient) DeleteUser(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockClientMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockClient)(nil).DeleteUser), ctx, userID)
}

// DeleteUserConnection mocks base method.
func (m *MockClient) DeleteUserConnection(ctx context.Context, userID, connectionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserConnection", ctx, userID, connectionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserConnection indicates an expected call of DeleteUserConnection.
func (mr *MockClientMockRecorder) DeleteUserConnection(ctx, userID, connectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserConnection", reflect.TypeOf((*MockClient)(nil).DeleteUserConnection), ctx, userID, connectionID)
}

// FetchAccounts mocks base method.
func (m *MockClient) FetchAccounts(ctx context.Context, startToken, pageSize int) ([]models.PSPAccount, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAccounts", ctx, startToken, pageSize)
	ret0, _ := ret[0].([]models.PSPAccount)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchAccounts indicates an expected call of FetchAccounts.
func (mr *MockClientMockRecorder) FetchAccounts(ctx, startToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAccounts", reflect.TypeOf((*MockClient)(nil).FetchAccounts), ctx, startToken, pageSize)
}

// FetchPayments mocks base method.
func (m *MockClient) FetchPayments(ctx context.Context, startToken, pageSize int) ([]models.PSPPayment, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPayments", ctx, startToken, pageSize)
	ret0, _ := ret[0].([]models.PSPPayment)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchPayments indicates an expected call of FetchPayments.
func (mr *MockClientMockRecorder) FetchPayments(ctx, startToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPayments", reflect.TypeOf((*MockClient)(nil).FetchPayments), ctx, startToken, pageSize)
}
