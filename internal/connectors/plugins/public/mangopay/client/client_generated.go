// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateCABankAccount mocks base method.
func (m *MockClient) CreateCABankAccount(ctx context.Context, userID string, req *CreateCABankAccountRequest) (*BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCABankAccount", ctx, userID, req)
	ret0, _ := ret[0].(*BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCABankAccount indicates an expected call of CreateCABankAccount.
func (mr *MockClientMockRecorder) CreateCABankAccount(ctx, userID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCABankAccount", reflect.TypeOf((*MockClient)(nil).CreateCABankAccount), ctx, userID, req)
}

// CreateGBBankAccount mocks base method.
func (m *MockClient) CreateGBBankAccount(ctx context.Context, userID string, req *CreateGBBankAccountRequest) (*BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGBBankAccount", ctx, userID, req)
	ret0, _ := ret[0].(*BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGBBankAccount indicates an expected call of CreateGBBankAccount.
func (mr *MockClientMockRecorder) CreateGBBankAccount(ctx, userID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGBBankAccount", reflect.TypeOf((*MockClient)(nil).CreateGBBankAccount), ctx, userID, req)
}

// CreateHook mocks base method.
func (m *MockClient) CreateHook(ctx context.Context, eventType EventType, URL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHook", ctx, eventType, URL)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHook indicates an expected call of CreateHook.
func (mr *MockClientMockRecorder) CreateHook(ctx, eventType, URL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHook", reflect.TypeOf((*MockClient)(nil).CreateHook), ctx, eventType, URL)
}

// CreateIBANBankAccount mocks base method.
func (m *MockClient) CreateIBANBankAccount(ctx context.Context, userID string, req *CreateIBANBankAccountRequest) (*BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIBANBankAccount", ctx, userID, req)
	ret0, _ := ret[0].(*BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIBANBankAccount indicates an expected call of CreateIBANBankAccount.
func (mr *MockClientMockRecorder) CreateIBANBankAccount(ctx, userID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIBANBankAccount", reflect.TypeOf((*MockClient)(nil).CreateIBANBankAccount), ctx, userID, req)
}

// CreateOtherBankAccount mocks base method.
func (m *MockClient) CreateOtherBankAccount(ctx context.Context, userID string, req *CreateOtherBankAccountRequest) (*BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOtherBankAccount", ctx, userID, req)
	ret0, _ := ret[0].(*BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOtherBankAccount indicates an expected call of CreateOtherBankAccount.
func (mr *MockClientMockRecorder) CreateOtherBankAccount(ctx, userID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOtherBankAccount", reflect.TypeOf((*MockClient)(nil).CreateOtherBankAccount), ctx, userID, req)
}

// CreateUSBankAccount mocks base method.
func (m *MockClient) CreateUSBankAccount(ctx context.Context, userID string, req *CreateUSBankAccountRequest) (*BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUSBankAccount", ctx, userID, req)
	ret0, _ := ret[0].(*BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUSBankAccount indicates an expected call of CreateUSBankAccount.
func (mr *MockClientMockRecorder) CreateUSBankAccount(ctx, userID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUSBankAccount", reflect.TypeOf((*MockClient)(nil).CreateUSBankAccount), ctx, userID, req)
}

// GetBankAccounts mocks base method.
func (m *MockClient) GetBankAccounts(ctx context.Context, userID string, page, pageSize int) ([]BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccounts", ctx, userID, page, pageSize)
	ret0, _ := ret[0].([]BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccounts indicates an expected call of GetBankAccounts.
func (mr *MockClientMockRecorder) GetBankAccounts(ctx, userID, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccounts", reflect.TypeOf((*MockClient)(nil).GetBankAccounts), ctx, userID, page, pageSize)
}

// GetPayin mocks base method.
func (m *MockClient) GetPayin(ctx context.Context, payinID string) (*PayinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayin", ctx, payinID)
	ret0, _ := ret[0].(*PayinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayin indicates an expected call of GetPayin.
func (mr *MockClientMockRecorder) GetPayin(ctx, payinID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayin", reflect.TypeOf((*MockClient)(nil).GetPayin), ctx, payinID)
}

// GetPayout mocks base method.
func (m *MockClient) GetPayout(ctx context.Context, payoutID string) (*PayoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayout", ctx, payoutID)
	ret0, _ := ret[0].(*PayoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayout indicates an expected call of GetPayout.
func (mr *MockClientMockRecorder) GetPayout(ctx, payoutID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayout", reflect.TypeOf((*MockClient)(nil).GetPayout), ctx, payoutID)
}

// GetRefund mocks base method.
func (m *MockClient) GetRefund(ctx context.Context, refundID string) (*Refund, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefund", ctx, refundID)
	ret0, _ := ret[0].(*Refund)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefund indicates an expected call of GetRefund.
func (mr *MockClientMockRecorder) GetRefund(ctx, refundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefund", reflect.TypeOf((*MockClient)(nil).GetRefund), ctx, refundID)
}

// GetTransactions mocks base method.
func (m *MockClient) GetTransactions(ctx context.Context, walletsID string, page, pageSize int, afterCreatedAt time.Time) ([]Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, walletsID, page, pageSize, afterCreatedAt)
	ret0, _ := ret[0].([]Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockClientMockRecorder) GetTransactions(ctx, walletsID, page, pageSize, afterCreatedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockClient)(nil).GetTransactions), ctx, walletsID, page, pageSize, afterCreatedAt)
}

// GetUsers mocks base method.
func (m *MockClient) GetUsers(ctx context.Context, page, pageSize int) ([]User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, page, pageSize)
	ret0, _ := ret[0].([]User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockClientMockRecorder) GetUsers(ctx, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockClient)(nil).GetUsers), ctx, page, pageSize)
}

// GetWallet mocks base method.
func (m *MockClient) GetWallet(ctx context.Context, walletID string) (*Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, walletID)
	ret0, _ := ret[0].(*Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockClientMockRecorder) GetWallet(ctx, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockClient)(nil).GetWallet), ctx, walletID)
}

// GetWalletTransfer mocks base method.
func (m *MockClient) GetWalletTransfer(ctx context.Context, transferID string) (TransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletTransfer", ctx, transferID)
	ret0, _ := ret[0].(TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletTransfer indicates an expected call of GetWalletTransfer.
func (mr *MockClientMockRecorder) GetWalletTransfer(ctx, transferID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletTransfer", reflect.TypeOf((*MockClient)(nil).GetWalletTransfer), ctx, transferID)
}

// GetWallets mocks base method.
func (m *MockClient) GetWallets(ctx context.Context, userID string, page, pageSize int) ([]Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallets", ctx, userID, page, pageSize)
	ret0, _ := ret[0].([]Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallets indicates an expected call of GetWallets.
func (mr *MockClientMockRecorder) GetWallets(ctx, userID, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallets", reflect.TypeOf((*MockClient)(nil).GetWallets), ctx, userID, page, pageSize)
}

// InitiatePayout mocks base method.
func (m *MockClient) InitiatePayout(ctx context.Context, payoutRequest *PayoutRequest) (*PayoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiatePayout", ctx, payoutRequest)
	ret0, _ := ret[0].(*PayoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiatePayout indicates an expected call of InitiatePayout.
func (mr *MockClientMockRecorder) InitiatePayout(ctx, payoutRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatePayout", reflect.TypeOf((*MockClient)(nil).InitiatePayout), ctx, payoutRequest)
}

// InitiateWalletTransfer mocks base method.
func (m *MockClient) InitiateWalletTransfer(ctx context.Context, transferRequest *TransferRequest) (*TransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateWalletTransfer", ctx, transferRequest)
	ret0, _ := ret[0].(*TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateWalletTransfer indicates an expected call of InitiateWalletTransfer.
func (mr *MockClientMockRecorder) InitiateWalletTransfer(ctx, transferRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateWalletTransfer", reflect.TypeOf((*MockClient)(nil).InitiateWalletTransfer), ctx, transferRequest)
}

// ListAllHooks mocks base method.
func (m *MockClient) ListAllHooks(ctx context.Context) ([]*Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllHooks", ctx)
	ret0, _ := ret[0].([]*Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllHooks indicates an expected call of ListAllHooks.
func (mr *MockClientMockRecorder) ListAllHooks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllHooks", reflect.TypeOf((*MockClient)(nil).ListAllHooks), ctx)
}

// UpdateHook mocks base method.
func (m *MockClient) UpdateHook(ctx context.Context, hookID, URL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHook", ctx, hookID, URL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHook indicates an expected call of UpdateHook.
func (mr *MockClientMockRecorder) UpdateHook(ctx, hookID, URL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHook", reflect.TypeOf((*MockClient)(nil).UpdateHook), ctx, hookID, URL)
}
