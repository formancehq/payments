// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	moov "github.com/moovfinancial/moov-go/pkg/moov"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetExternalAccounts mocks base method.
func (m *MockClient) GetExternalAccounts(ctx context.Context, accountID string) ([]moov.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalAccounts", ctx, accountID)
	ret0, _ := ret[0].([]moov.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalAccounts indicates an expected call of GetExternalAccounts.
func (mr *MockClientMockRecorder) GetExternalAccounts(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalAccounts", reflect.TypeOf((*MockClient)(nil).GetExternalAccounts), ctx, accountID)
}

// GetPayments mocks base method.
func (m *MockClient) GetPayments(ctx context.Context, accountID string, status moov.TransferStatus, skip, count int, timeline Timeline) ([]moov.Transfer, Timeline, bool, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayments", ctx, accountID, status, skip, count, timeline)
	ret0, _ := ret[0].([]moov.Transfer)
	ret1, _ := ret[1].(Timeline)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(int)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetPayments indicates an expected call of GetPayments.
func (mr *MockClientMockRecorder) GetPayments(ctx, accountID, status, skip, count, timeline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayments", reflect.TypeOf((*MockClient)(nil).GetPayments), ctx, accountID, status, skip, count, timeline)
}

// GetUsers mocks base method.
func (m *MockClient) GetUsers(ctx context.Context, page, pageSize int) ([]moov.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, page, pageSize)
	ret0, _ := ret[0].([]moov.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockClientMockRecorder) GetUsers(ctx, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockClient)(nil).GetUsers), ctx, page, pageSize)
}

// GetWallet mocks base method.
func (m *MockClient) GetWallet(ctx context.Context, accountID, walletID string) (*moov.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, accountID, walletID)
	ret0, _ := ret[0].(*moov.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockClientMockRecorder) GetWallet(ctx, accountID, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockClient)(nil).GetWallet), ctx, accountID, walletID)
}

// GetWallets mocks base method.
func (m *MockClient) GetWallets(ctx context.Context, accountID string) ([]moov.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallets", ctx, accountID)
	ret0, _ := ret[0].([]moov.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallets indicates an expected call of GetWallets.
func (mr *MockClientMockRecorder) GetWallets(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallets", reflect.TypeOf((*MockClient)(nil).GetWallets), ctx, accountID)
}

// InitiatePayout mocks base method.
func (m *MockClient) InitiatePayout(ctx context.Context, sourceAccountId, destinationAccountID string, pr moov.CreateTransfer) (*moov.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiatePayout", ctx, sourceAccountId, destinationAccountID, pr)
	ret0, _ := ret[0].(*moov.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiatePayout indicates an expected call of InitiatePayout.
func (mr *MockClientMockRecorder) InitiatePayout(ctx, sourceAccountId, destinationAccountID, pr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatePayout", reflect.TypeOf((*MockClient)(nil).InitiatePayout), ctx, sourceAccountId, destinationAccountID, pr)
}

// NewWithClient mocks base method.
func (m *MockClient) NewWithClient(service MoovClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewWithClient", service)
}

// NewWithClient indicates an expected call of NewWithClient.
func (mr *MockClientMockRecorder) NewWithClient(service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWithClient", reflect.TypeOf((*MockClient)(nil).NewWithClient), service)
}

// MockMoovClient is a mock of MoovClient interface.
type MockMoovClient struct {
	ctrl     *gomock.Controller
	recorder *MockMoovClientMockRecorder
	isgomock struct{}
}

// MockMoovClientMockRecorder is the mock recorder for MockMoovClient.
type MockMoovClientMockRecorder struct {
	mock *MockMoovClient
}

// NewMockMoovClient creates a new mock instance.
func NewMockMoovClient(ctrl *gomock.Controller) *MockMoovClient {
	mock := &MockMoovClient{ctrl: ctrl}
	mock.recorder = &MockMoovClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMoovClient) EXPECT() *MockMoovClientMockRecorder {
	return m.recorder
}

// CreateMoovTransfer mocks base method.
func (m *MockMoovClient) CreateMoovTransfer(ctx context.Context, partnerAccountID string, transfer moov.CreateTransfer) (*moov.Transfer, *moov.TransferStarted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMoovTransfer", ctx, partnerAccountID, transfer)
	ret0, _ := ret[0].(*moov.Transfer)
	ret1, _ := ret[1].(*moov.TransferStarted)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMoovTransfer indicates an expected call of CreateMoovTransfer.
func (mr *MockMoovClientMockRecorder) CreateMoovTransfer(ctx, partnerAccountID, transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMoovTransfer", reflect.TypeOf((*MockMoovClient)(nil).CreateMoovTransfer), ctx, partnerAccountID, transfer)
}

// GetMoovAccounts mocks base method.
func (m *MockMoovClient) GetMoovAccounts(ctx context.Context, skip, count int) ([]moov.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoovAccounts", ctx, skip, count)
	ret0, _ := ret[0].([]moov.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoovAccounts indicates an expected call of GetMoovAccounts.
func (mr *MockMoovClientMockRecorder) GetMoovAccounts(ctx, skip, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoovAccounts", reflect.TypeOf((*MockMoovClient)(nil).GetMoovAccounts), ctx, skip, count)
}

// GetMoovBankAccounts mocks base method.
func (m *MockMoovClient) GetMoovBankAccounts(ctx context.Context, accountID string) ([]moov.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoovBankAccounts", ctx, accountID)
	ret0, _ := ret[0].([]moov.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoovBankAccounts indicates an expected call of GetMoovBankAccounts.
func (mr *MockMoovClientMockRecorder) GetMoovBankAccounts(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoovBankAccounts", reflect.TypeOf((*MockMoovClient)(nil).GetMoovBankAccounts), ctx, accountID)
}

// GetMoovTransferOptions mocks base method.
func (m *MockMoovClient) GetMoovTransferOptions(ctx context.Context, request PaymentOptionsRequest) (*moov.TransferOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoovTransferOptions", ctx, request)
	ret0, _ := ret[0].(*moov.TransferOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoovTransferOptions indicates an expected call of GetMoovTransferOptions.
func (mr *MockMoovClientMockRecorder) GetMoovTransferOptions(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoovTransferOptions", reflect.TypeOf((*MockMoovClient)(nil).GetMoovTransferOptions), ctx, request)
}

// GetMoovTransfers mocks base method.
func (m *MockMoovClient) GetMoovTransfers(ctx context.Context, accountID string, filters ...moov.ListTransferFilter) ([]moov.Transfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, accountID}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMoovTransfers", varargs...)
	ret0, _ := ret[0].([]moov.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoovTransfers indicates an expected call of GetMoovTransfers.
func (mr *MockMoovClientMockRecorder) GetMoovTransfers(ctx, accountID any, filters ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, accountID}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoovTransfers", reflect.TypeOf((*MockMoovClient)(nil).GetMoovTransfers), varargs...)
}

// GetMoovWallet mocks base method.
func (m *MockMoovClient) GetMoovWallet(ctx context.Context, accountID, walletID string) (*moov.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoovWallet", ctx, accountID, walletID)
	ret0, _ := ret[0].(*moov.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoovWallet indicates an expected call of GetMoovWallet.
func (mr *MockMoovClientMockRecorder) GetMoovWallet(ctx, accountID, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoovWallet", reflect.TypeOf((*MockMoovClient)(nil).GetMoovWallet), ctx, accountID, walletID)
}

// GetMoovWallets mocks base method.
func (m *MockMoovClient) GetMoovWallets(ctx context.Context, accountID string) ([]moov.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoovWallets", ctx, accountID)
	ret0, _ := ret[0].([]moov.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoovWallets indicates an expected call of GetMoovWallets.
func (mr *MockMoovClientMockRecorder) GetMoovWallets(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoovWallets", reflect.TypeOf((*MockMoovClient)(nil).GetMoovWallets), ctx, accountID)
}
