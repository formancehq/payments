// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	management "github.com/adyen/adyen-go-api-library/v7/src/management"
	webhook "github.com/adyen/adyen-go-api-library/v7/src/webhook"
	models "github.com/formancehq/payments/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateWebhook mocks base method.
func (m *MockClient) CreateWebhook(ctx context.Context, url, connectorID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhook", ctx, url, connectorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWebhook indicates an expected call of CreateWebhook.
func (mr *MockClientMockRecorder) CreateWebhook(ctx, url, connectorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*MockClient)(nil).CreateWebhook), ctx, url, connectorID)
}

// DeleteWebhook mocks base method.
func (m *MockClient) DeleteWebhook(ctx context.Context, connectorID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhook", ctx, connectorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebhook indicates an expected call of DeleteWebhook.
func (mr *MockClientMockRecorder) DeleteWebhook(ctx, connectorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*MockClient)(nil).DeleteWebhook), ctx, connectorID)
}

// GetMerchantAccounts mocks base method.
func (m *MockClient) GetMerchantAccounts(ctx context.Context, pageNumber, pageSize int32) ([]management.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchantAccounts", ctx, pageNumber, pageSize)
	ret0, _ := ret[0].([]management.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchantAccounts indicates an expected call of GetMerchantAccounts.
func (mr *MockClientMockRecorder) GetMerchantAccounts(ctx, pageNumber, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchantAccounts", reflect.TypeOf((*MockClient)(nil).GetMerchantAccounts), ctx, pageNumber, pageSize)
}

// TranslateWebhook mocks base method.
func (m *MockClient) TranslateWebhook(req string) (*webhook.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateWebhook", req)
	ret0, _ := ret[0].(*webhook.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateWebhook indicates an expected call of TranslateWebhook.
func (mr *MockClientMockRecorder) TranslateWebhook(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateWebhook", reflect.TypeOf((*MockClient)(nil).TranslateWebhook), req)
}

// VerifyWebhookBasicAuth mocks base method.
func (m *MockClient) VerifyWebhookBasicAuth(basicAuth *models.BasicAuth) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyWebhookBasicAuth", basicAuth)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyWebhookBasicAuth indicates an expected call of VerifyWebhookBasicAuth.
func (mr *MockClientMockRecorder) VerifyWebhookBasicAuth(basicAuth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyWebhookBasicAuth", reflect.TypeOf((*MockClient)(nil).VerifyWebhookBasicAuth), basicAuth)
}

// VerifyWebhookHMAC mocks base method.
func (m *MockClient) VerifyWebhookHMAC(item webhook.NotificationItem) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyWebhookHMAC", item)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyWebhookHMAC indicates an expected call of VerifyWebhookHMAC.
func (mr *MockClientMockRecorder) VerifyWebhookHMAC(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyWebhookHMAC", reflect.TypeOf((*MockClient)(nil).VerifyWebhookHMAC), item)
}
