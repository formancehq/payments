// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_generated.go -package client . Client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateTemporaryCode mocks base method.
func (m *MockClient) CreateTemporaryCode(arg0 context.Context, arg1 CreateTemporaryLinkRequest) (CreateTemporaryLinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemporaryCode", arg0, arg1)
	ret0, _ := ret[0].(CreateTemporaryLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemporaryCode indicates an expected call of CreateTemporaryCode.
func (mr *MockClientMockRecorder) CreateTemporaryCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemporaryCode", reflect.TypeOf((*MockClient)(nil).CreateTemporaryCode), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockClient) CreateUser(arg0 context.Context) (CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClientMockRecorder) CreateUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClient)(nil).CreateUser), arg0)
}

// CreateWebhookAuth mocks base method.
func (m *MockClient) CreateWebhookAuth(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhookAuth", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhookAuth indicates an expected call of CreateWebhookAuth.
func (mr *MockClientMockRecorder) CreateWebhookAuth(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhookAuth", reflect.TypeOf((*MockClient)(nil).CreateWebhookAuth), ctx, name)
}

// DeleteUser mocks base method.
func (m *MockClient) DeleteUser(ctx context.Context, req DeleteUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockClientMockRecorder) DeleteUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockClient)(nil).DeleteUser), ctx, req)
}

// DeleteUserConnection mocks base method.
func (m *MockClient) DeleteUserConnection(ctx context.Context, req DeleteUserConnectionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserConnection", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserConnection indicates an expected call of DeleteUserConnection.
func (mr *MockClientMockRecorder) DeleteUserConnection(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserConnection", reflect.TypeOf((*MockClient)(nil).DeleteUserConnection), ctx, req)
}

// DeleteWebhookAuth mocks base method.
func (m *MockClient) DeleteWebhookAuth(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhookAuth", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebhookAuth indicates an expected call of DeleteWebhookAuth.
func (mr *MockClientMockRecorder) DeleteWebhookAuth(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhookAuth", reflect.TypeOf((*MockClient)(nil).DeleteWebhookAuth), ctx, id)
}

// GetBankAccount mocks base method.
func (m *MockClient) GetBankAccount(ctx context.Context, accessToken string, bankAccountID int) (BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccount", ctx, accessToken, bankAccountID)
	ret0, _ := ret[0].(BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccount indicates an expected call of GetBankAccount.
func (mr *MockClientMockRecorder) GetBankAccount(ctx, accessToken, bankAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccount", reflect.TypeOf((*MockClient)(nil).GetBankAccount), ctx, accessToken, bankAccountID)
}

// ListWebhookAuths mocks base method.
func (m *MockClient) ListWebhookAuths(ctx context.Context) ([]WebhookAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebhookAuths", ctx)
	ret0, _ := ret[0].([]WebhookAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebhookAuths indicates an expected call of ListWebhookAuths.
func (mr *MockClientMockRecorder) ListWebhookAuths(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhookAuths", reflect.TypeOf((*MockClient)(nil).ListWebhookAuths), ctx)
}
