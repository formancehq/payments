/*
Payments API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ConnectorConfig - struct for ConnectorConfig
type ConnectorConfig struct {
	StripeConfig *StripeConfig
}

// StripeConfigAsConnectorConfig is a convenience function that returns StripeConfig wrapped in ConnectorConfig
func StripeConfigAsConnectorConfig(v *StripeConfig) ConnectorConfig {
	return ConnectorConfig{
		StripeConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConnectorConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into StripeConfig
	err = newStrictDecoder(data).Decode(&dst.StripeConfig)
	if err == nil {
		jsonStripeConfig, _ := json.Marshal(dst.StripeConfig)
		if string(jsonStripeConfig) == "{}" { // empty struct
			dst.StripeConfig = nil
		} else {
			match++
		}
	} else {
		dst.StripeConfig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.StripeConfig = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ConnectorConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ConnectorConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConnectorConfig) MarshalJSON() ([]byte, error) {
	if src.StripeConfig != nil {
		return json.Marshal(&src.StripeConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ConnectorConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.StripeConfig != nil {
		return obj.StripeConfig
	}

	// all schemas are nil
	return nil
}

type NullableConnectorConfig struct {
	value *ConnectorConfig
	isSet bool
}

func (v NullableConnectorConfig) Get() *ConnectorConfig {
	return v.value
}

func (v *NullableConnectorConfig) Set(val *ConnectorConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorConfig(val *ConnectorConfig) *NullableConnectorConfig {
	return &NullableConnectorConfig{value: val, isSet: true}
}

func (v NullableConnectorConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


